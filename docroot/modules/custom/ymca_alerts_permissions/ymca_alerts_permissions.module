<?php

/**
 * @file
 * Contains ymca_alerts_permission module hooks.
 */

use \Drupal\views\ViewExecutable;
use \Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_views_pre_view.
 */
function ymca_alerts_permissions_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'alert_belongs_reference' &&  $display_id == 'entity_reference_2') {
    $user = \Drupal::currentUser()->getAccount();
    if (!($user->id() == 1 || in_array('administrator', $user->getRoles()))) {
        if (in_array('alert_manager', $user->getRoles())) {
            // Send the user uid to the view contextual filter so the results are filtered
            // Based on the branches selected in the user's field_branch.
            $account = \Drupal::getContainer()->get('entity.manager')->getStorage('user')->load($user->id());
          if (!empty($account->field_branch->getValue())) {
              $args[] = $user->id();
          }

      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function ymca_alerts_permissions_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'alert_belongs_reference' &&  $view->current_display == 'entity_reference_2') {
    $user = \Drupal::currentUser()->getAccount();
    if (!($user->id() == 1 || in_array('administrator', $user->getRoles()))) {
      if (in_array('alert_manager', $user->getRoles())) {
        // Sanity check so the filter exists.
        if ($query->where[1]['conditions'][0]['field'] == 'node_field_data.type') {
          // Set the content type filter to 'branch' only.
          $query->where[1]['conditions'][0]['value'] = array('branch');
        }
      }
      else {
        // We will be here if not: user 1; administrator; alert_manager roles.
        // So we set the filter to something unreal to not allow results thus users can not set anything.
        if ($query->where[1]['conditions'][0]['field'] == 'node_field_data.type') {
          $query->where[1]['conditions'][0]['value'] = array('not-allowed');
        }
      }
    }
  }
}
