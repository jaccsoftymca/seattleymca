<?php

/**
 * @file
 * Contains ygs_master specific functions.
 */

use Drupal\Core\Database\Database;

/**
 * OpenY migrate entity fields data helper.
 *
 * @param string $bundle
 *   Entity bundle.
 * @param array $fields
 *   Array of field to migrate, contains from and to values.
 * @param bool $delete_old
 *   Delete FROM fields.
 * @param string $entity
 *   Entity type.
 */
function ygs_master_paragraph_field_migrate($bundle, array $fields, $delete_old = TRUE, $entity = 'paragraph') {
  $old_fields = [];
  foreach ($fields as $field) {
    // Copy data from old field to new.
    $old_fields[] = $from = $field['from']['field'];
    $from_columns = implode(',', $field['from']['columns']);
    $to = $field['to']['field'];

    $insert_fields = array_merge([
      'bundle',
      'deleted',
      'entity_id',
      'revision_id',
      'langcode',
      'delta',
    ], $field['to']['columns']);
    $to_columns = implode(',', $insert_fields);

    $count_field_data = "SELECT count(*)
      FROM {" . $entity . "__$from}
      WHERE bundle='$bundle'
    ";

    $copy_field_data = function ($offset, $limit) use ($entity, $from, $bundle, $from_columns, $to, $to_columns) {
      return "
        INSERT INTO {" . $entity . "__$to} ($to_columns)
        SELECT bundle,deleted,entity_id,revision_id,langcode,delta,$from_columns
        FROM {" . $entity . "__$from}
        WHERE bundle='$bundle'
        LIMIT $offset,$limit
      ";
    };

    $count_field_revision_data = "SELECT count(*)
      FROM {" . $entity . "_revision__$from}
      WHERE bundle='$bundle'
    ";

    $copy_field_revision_data = function ($offset, $limit) use ($entity, $from, $bundle, $from_columns, $to, $to_columns) {
      return "
        INSERT INTO {" . $entity . "_revision__$to} ($to_columns)
        SELECT bundle,deleted,entity_id,revision_id,langcode,delta,$from_columns
        FROM {" . $entity . "_revision__$from}
        WHERE bundle='$bundle'
        LIMIT $offset,$limit
      ";
    };

    $count_field_data_count = (int) db_query($count_field_data)->fetchField();
    $range = 10000;
    for ($i = 0; $i < $count_field_data_count; $i+=$range) {
      $offset = $i;
      $limit = $range;
      Database::getConnection('default')
        ->query($copy_field_data($offset, $limit), [], []);
    }

    $count_field_revision_data_count = (int) db_query($count_field_revision_data)->fetchField();
    for ($i = 0; $i < $count_field_revision_data_count; $i+=$range) {
      $offset = $i;
      $limit = $range;
      Database::getConnection('default')
        ->query($copy_field_revision_data($offset, $limit), [], []);
    }
  }

  if ($delete_old) {
    // Delete old fields.
    $properties = array(
      'entity_type' => $entity,
      'bundle' => $bundle,
      'include_deleted' => TRUE,
    );
    $fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties($properties);
    foreach ($fields as $field) {
      $entity_type = $field->getTargetEntityTypeId();
      if (in_array($field->getName(), $old_fields)) {
        Drupal::entityTypeManager()->getStorage($entity_type)->purgeFieldData($field, 100);
        $field->delete();
        field_purge_field($field);
      }
    }
  }
}
