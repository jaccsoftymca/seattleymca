<?php

/**
 * @file
 * Module for hook_update_N.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\ymca_mappings\Entity\Mapping;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\user\Entity\Role;
use Drupal\block_content\Entity\BlockContent;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\openy_media\EmbedButtonIconHelper;

define('YGS_CONFDIR', 'sites/default/config/staging/');
define('YGS_CONFDIR_NO_SLASH', 'sites/default/config/staging');

// Temporary set TZ here.
date_default_timezone_set('America/Los_Angeles');

/**
 * Implements hook_install().
 */
function ygs_master_update_8001() {
  \Drupal::service('module_installer')->install(array('config_import'), TRUE);
}

/**
 * Add mappings admin view.
 */
function ygs_master_update_8002() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.mapping_content',
    ]
  );
}

/**
 * YGS-103 Enable required REST resource.
 */
function ygs_master_update_8004() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'rest.resource.class_session',
      'user.role.anonymous',
      'user.role.authenticated',
    ]
  );
}

/**
 * Add mappings admin view.
 */
function ygs_master_update_8007() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'page_manager.page_variant.node_view-panels_variant-1',
      'page_manager.page_variant.node_view-panels_variant-4',
    ]
  );
}

/**
 * Add locations_popup image style.
 */
function ygs_master_update_8008() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'image.style.locations_popup',
    ]
  );
}

/**
 * Change tabs position.
 */
function ygs_master_update_8009() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'block.block.mainpagecontent',
      'block.block.tabs',
      'page_manager.page_variant.node_view-panels_variant-4',
    ]
  );
}

/**
 * Add locations_popup image style.
 */
function ygs_master_update_8010() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'user.role.anonymous',
      'user.role.authenticated',
    ]
  );
}

/**
 * Add popup to subcategory page.
 */
function ygs_master_update_8011() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'page_manager.page_variant.node_view-panels_variant-1',
    ]
  );
}

/**
 * Branch page default view changes.
 */
function ygs_master_update_8012() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.branch.default',
    ]
  );
}

/**
 * Enable ymca_sync and activenet_sync modules.
 */
function ygs_master_update_8013() {
  \Drupal::service('module_installer')->install(['ymca_sync', 'activenet_sync'], TRUE);
}

/**
 * Enable activenet_client module.
 */
function ygs_master_update_8014() {
  \Drupal::service('module_installer')->install(['activenet_client'], TRUE);
}

/**
 * Add blog edit form script.
 */
function ygs_master_update_8015() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.blog_post.default',
      'core.entity_view_display.node.blog_post.default',
      'core.entity_view_display.node.blog_post.full',
      'core.entity_view_display.node.blog_post.sidebar',
      'core.entity_view_display.node.blog_post.teaser',
      'field.field.node.blog_post.field_locations',
      'field.storage.node.field_locations',
      'views.view.blog',
    ]
  );
}

/**
 * Enable datawarehouse_client module.
 */
function ygs_master_update_8016() {
  \Drupal::service('module_installer')->install(['datawarehouse_client'], TRUE);
}

/**
 * Add blog edit form script.
 */
function ygs_master_update_8017() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'page_manager.page_variant.node_view-panels_variant-1',
    ]
  );
}

/**
 * Enable ygs_schedules module and create page "Schedules".
 */
function ygs_master_update_8019() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.branch.default',
      'core.entity_view_display.node.class.teaser',
      'field.storage.node.field_layout',
    ]
  );
  \Drupal::service('module_installer')->install(['ygs_schedules'], TRUE);
  $node = Node::create(array(
    'type' => 'landing_page',
    'title' => 'Schedules',
    'langcode' => 'en',
    'uid' => '1',
    'status' => 1,
    'moderation_state' => 'published',
    'field_layout' => 'one_column_clean',
  ));
  $node->save();
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'landing_page')
    ->condition('title', 'Schedules');
  $schedules_page_id = $query->execute();
  $schedules_page_id = reset($schedules_page_id);
  if (!empty($schedules_page_id)) {
    $schedules_page = \Drupal::entityTypeManager()->getStorage('node')->load($schedules_page_id);
    $paragraph = Paragraph::create([
      'type' => 'dynamic_content',
      'parent_id' => $schedules_page->id(),
      'parent_type' => 'node',
      'parent_field_name' => 'field_content',
      'status' => 1,
      'field_custom_block_reference' => 'schedules_search_block',
    ]);
    $paragraph->save();
    $query = \Drupal::entityQuery('paragraph')
      ->condition('type', 'dynamic_content')
      ->condition('parent_id', $schedules_page_id);
    $paragraph_id = $query->execute();
    $paragraph_id = reset($paragraph_id);
    $paragraph = \Drupal::entityTypeManager()->getStorage('paragraph')->load($paragraph_id);
    $schedules_page->field_content->entity = $paragraph;
    $schedules_page->save();
    $path = \Drupal::service('path.alias_storage')->save('/node/' . $schedules_page_id, '/schedules', 'en');
  }
}

/**
 * Enable ygs_sync_cache module.
 */
function ygs_master_update_8020() {
  \Drupal::service('module_installer')->install(['ygs_sync_cache'], TRUE);
}

/**
 * Add new paragraph types.
 */
function ygs_master_update_8021() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.paragraph.category_content.field_media_image',
      'core.entity_form_display.field_collection_item.field_collection_classes.default',
      'core.entity_form_display.paragraph.category_content.default',
      'core.entity_form_display.paragraph.class_content.default',
      'core.entity_view_display.paragraph.category_content.default',
      'core.entity_view_display.paragraph.class_content.default',
      'field.field.field_collection_item.field_collection_classes.field_body_no_summary',
      'field.field.field_collection_item.field_collection_classes.field_cta_link',
      'field.field.field_collection_item.field_collection_classes.field_title',
      'field.field.paragraph.category_content.field_body_no_summary',
      'field.field.paragraph.category_content.field_cta_link',
      'field.field.paragraph.category_content.field_title',
      'field.field.paragraph.class_content.field_collection_classes',
      'field.field.paragraph.class_content.field_style',
      'field.storage.field_collection_item.field_body_no_summary',
      'field.storage.field_collection_item.field_column_link',
      'field.storage.field_collection_item.field_cta_link',
      'field.storage.field_collection_item.field_title',
      'field.storage.paragraph.field_collection_classes',
      'field.storage.paragraph.field_image',
      'field.storage.paragraph.field_title',
      'field_collection.field_collection.field_collection_classes',
      'paragraphs.paragraphs_type.category_content',
      'paragraphs.paragraphs_type.class_content',
      'core.entity_view_display.field_collection_item.field_collection_classes.default',
    ]
  );
}

/**
 * Delete tabs from panel, add popup link to class page.
 */
function ygs_master_update_8022() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'page_manager.page_variant.node_view-panels_variant-4',
    ]
  );
}

/**
 * Add Announcement CT.
 */
function ygs_master_update_8023() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.announcement.default',
      'core.entity_view_display.node.announcement.default',
      'core.entity_view_display.node.announcement.teaser',
      'field.field.node.announcement.field_blog_color',
      'field.field.node.announcement.field_branch_queue',
      'field.field.node.announcement.field_homepage_queue',
      'field.field.node.announcement.field_link',
      'field.field.node.announcement.field_locations',
      'field.storage.node.field_branch_queue',
      'field.storage.node.field_homepage_queue',
      'node.type.announcement',
    ]
  );
}

/**
 * Add Membership CT.
 */
function ygs_master_update_8024() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.field_collection_item.field_membership_info.default',
      'core.entity_form_display.node.membership.default',
      'core.entity_view_display.field_collection_item.field_membership_info.default',
      'core.entity_view_display.node.membership.default',
      'core.entity_view_display.node.membership.teaser',
      'field.field.field_collection_item.field_membership_info.field_join_fee',
      'field.field.field_collection_item.field_membership_info.field_link',
      'field.field.field_collection_item.field_membership_info.field_location',
      'field.field.field_collection_item.field_membership_info.field_monthly_rate',
      'field.field.node.membership.field_body_no_summary',
      'field.field.node.membership.field_image',
      'field.field.node.membership.field_membership_info',
      'field.storage.field_collection_item.field_join_fee',
      'field.storage.field_collection_item.field_link',
      'field.storage.field_collection_item.field_location',
      'field.storage.field_collection_item.field_monthly_rate',
      'field.storage.node.field_membership_info',
      'field_collection.field_collection.field_membership_info',
      'node.type.membership',
      'field.storage.node.field_image',
      'views.view.membership',
      'image.style.teaser_262_233',
      'core.entity_view_mode.media.thumb_262_233',
      'core.entity_view_display.node.membership.registration',
      'core.entity_view_display.node.membership.full',
      'core.entity_view_display.media.image.thumb_262_233',
    ]
  );
}

/**
 * Add Activity node view variant.
 */
function ygs_master_update_8025() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'page_manager.page_variant.node_view-panels_variant-6',
      'core.entity_form_display.node.activity.default',
      'core.entity_view_display.node.activity.default',
      'field.field.node.activity.field_activenet_age_category',
      'field.field.node.activity.field_activenet_category',
      'field.field.node.activity.field_activenet_detailed_categor',
      'field.storage.node.field_activenet_age_category',
      'field.storage.node.field_activenet_category',
      'field.storage.node.field_activenet_detailed_categor',
    ]
  );
}

/**
 * Enable media field on "Category Content".
 */
function ygs_master_update_8027() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.paragraph.category_content.default',
      'core.entity_view_display.paragraph.category_content.default',
      'field.field.paragraph.category_content.field_media_image',
    ]
  );
}

/**
 * Enable media field on "Category Content".
 */
function ygs_master_update_8029() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.mapping.branch.default',
      'core.entity_view_display.mapping.branch.default',
      'field.field.mapping.branch.field_activenet_location_id',
      'field.field.mapping.branch.field_branch_mapping_location',
      'field.storage.mapping.field_activenet_location_id',
      'field.storage.mapping.field_branch_mapping_location',
    ]
  );

  $activenet_locations = [
    ['id' => 17, 'name' => 'Accelerator YMCA'],
    ['id' => 18, 'name' => 'Association Office'],
    ['id' => 10, 'name' => 'Auburn Valley YMCA'],
    ['id' => 5, 'name' => 'Bellevue Family YMCA'],
    ['id' => 11, 'name' => 'Coal Creek Family YMCA'],
    ['id' => 3, 'name' => 'Dale Turner Family YMCA'],
    ['id' => 7, 'name' => 'Downtown Seattle YMCA'],
    ['id' => 12, 'name' => 'Matt Griffin YMCA'],
    ['id' => 13, 'name' => 'Meredith Mathews East Madison YMCA'],
    ['id' => 9, 'name' => 'Northshore YMCA'],
    ['id' => 14, 'name' => 'Sammamish Community YMCA'],
    ['id' => 4, 'name' => 'Snoqualmie Valley YMCA'],
    ['id' => 15, 'name' => 'University Family YMCA'],
    ['id' => 8, 'name' => 'West Seattle & Fauntleroy YMCA'],
    ['id' => 6, 'name' => 'YMCA Camping & Outdoor Leadership'],
    ['id' => 2, 'name' => 'YMCA of Greater Seattle'],
    ['id' => 1, 'name' => 'MCA of Greater Seattle - Online'],
    ['id' => 16, 'name' => 'YMCA Youth & Government'],
  ];

  $db = \Drupal::database();
  $query = $db->select('node_field_data', 'n');
  $query->fields('n', ['nid', 'title']);
  $query->condition('type', 'branch');
  $query->condition('status', 1);
  $branches_list = $query->execute()->fetchAllKeyed();
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();

  foreach ($activenet_locations as $location) {
    if (!in_array($location['name'], $branches_list)) {
      // Create Unpublished branch if not exist.
      $node = Node::create([
        'type' => 'branch',
        'title' => $location['name'],
        'langcode' => $langcode,
        'uid' => 1,
        'status' => 0,
      ]);
      $node->save();
      $branch_id = $node->id();
    }
    else {
      $branch_id = array_search($location['name'], $branches_list);
    }
    // Create mapping.
    $mapping = Mapping::create([
      'type' => 'branch',
      'user_id' => 1,
      'name' => $location['name'],
      'field_branch_mapping_location' => [
        "target_id"  => $branch_id,
      ],
      'field_activenet_location_id' => [
        "value"  => $location['id'],
      ],
      'field_activenet_location_name' => [
        "value"  => $location['name'],
      ],
    ]);
    $mapping->save();
  }
}

/**
 * Re-enable field_layout config changes.
 */
function ygs_master_update_8031() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.storage.node.field_layout',
      'page_manager.page_variant.node_view-panels_variant-3',
      'core.entity_view_display.node.landing_page.default',
    ]
  );
}

/**
 * Apply new layout to Schedules page.
 */
function ygs_master_update_8032() {
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'landing_page')
    ->condition('title', 'Schedules');
  $schedules_page_id = $query->execute();
  $schedules_page_id = reset($schedules_page_id);
  if (!empty($schedules_page_id)) {
    $schedules_page = \Drupal::entityTypeManager()->getStorage('node')->load($schedules_page_id);
    $schedules_page->field_layout->value = 'one_column_clean';
    $schedules_page->save();
  }
}

/**
 * Revert changes.
 */
function ygs_master_update_8033() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.storage.field_collection_item.field_column_link',
      'scheduled_updates.scheduled_update_type.publishing',
    ]
  );
}

/**
 * Add Camps CT.
 */
function ygs_master_update_8034() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'node.type.camp',
      'core.base_field_override.node.camp.promote',
      'core.base_field_override.node.camp.status',
      'core.entity_form_display.node.camp.default',
      'core.entity_view_display.node.camp.default',
      'core.entity_view_display.node.camp.teaser',
      'field.field.node.camp.field_address',
      'field.field.node.camp.field_content',
      'field.field.node.camp.field_directions',
      'field.field.node.camp.field_email',
      'field.field.node.camp.field_fax',
      'field.field.node.camp.field_header_content',
      'field.field.node.camp.field_latitude',
      'field.field.node.camp.field_longitude',
      'field.field.node.camp.field_menu_links',
      'field.field.node.camp.field_phone',
      'field.storage.node.field_menu_links',
      'pathauto.pattern.camp_alias_pattern',
      'scheduled_updates.scheduled_update_type.publishing',
      'core.entity_form_display.paragraph.simple_content.default',
      'core.entity_view_display.paragraph.simple_content.default',
      'field.field.paragraph.simple_content.field_body_no_summary',
      'paragraphs.paragraphs_type.simple_content',
    ]
  );
}

/**
 * Add to announcements select all link.
 */
function ygs_master_update_8035() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.announcement.default',
      'core.entity_view_display.node.announcement.default',
      'core.entity_view_display.node.announcement.teaser',
      'field.field.node.announcement.field_add_to_branch_queue',
      'field.field.node.announcement.field_locations',
    ]
  );
}

/**
 * Update ER fields to refer to Camp CT too.
 */
function ygs_master_update_8036() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.node.alert.field_locations',
      'field.field.node.landing_page.field_location',
      'core.entity_form_display.node.alert.default',
      'core.entity_form_display.node.landing_page.default',
      'core.entity_view_display.node.alert.default',
      'core.entity_view_display.node.camp.teaser',
      'core.entity_view_display.node.landing_page.default',
      'field.field.node.announcement.field_locations',
      'field.field.node.blog_post.field_location',
      'field.field.node.blog_post.field_locations',
      'field.field.node.session.field_location',
    ]
  );
}

/**
 * Update the timezone to be Los Angeles.
 */
function ygs_master_update_8037() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'system.date',
    ]
  );
}

/**
 * Simple paragraph.
 */
function ygs_master_update_8038() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.paragraph.simple_content.default',
      'core.entity_view_display.paragraph.simple_content.default',
      'field.field.paragraph.simple_content.field_body_no_summary',
      'paragraphs.paragraphs_type.simple_content',
      'field.field.node.branch.field_content',
      'field.field.node.branch.field_header_content',
      'field.field.node.class.field_content',
      'field.field.node.class.field_sidebar_content',
      'field.field.node.facility.field_content',
      'field.field.node.facility.field_sidebar_content',
      'field.field.node.program.field_content',
      'field.field.node.program.field_sidebar_content',
      'field.field.node.program_subcategory.field_content',
      'field.field.node.landing_page.field_header_content',
    ]
  );
}

/**
 * Make Branch Activity hours multiple.
 */
function ygs_master_update_8039() {
  if ($field = \Drupal::entityManager()->getStorage('field_config')->load('node.branch.field_collection_activity_hours')) {
    $field->delete();
    field_purge_field($field);
  }
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.field_collection_item.field_collection_activity_group.default',
      'core.entity_form_display.field_collection_item.field_collection_activity_hours.default',
      'core.entity_form_display.node.branch.default',
      'core.entity_view_display.field_collection_item.field_collection_activity_group.default',
      'core.entity_view_display.field_collection_item.field_collection_activity_hours.default',
      'core.entity_view_display.node.branch.default',
      'core.entity_view_display.node.branch.header_branch',
      'core.entity_view_display.node.branch.teaser',
      'field.field.field_collection_item.field_collection_activity_group.field_collection_activity_hours',
      'field.field.field_collection_item.field_collection_activity_group.field_headline',
      'field.field.field_collection_item.field_collection_activity_hours.field_day_of_the_week',
      'field.field.field_collection_item.field_collection_activity_hours.field_start_end_time',
      'field.field.node.branch.field_collection_activity_group',
      'field.storage.field_collection_item.field_collection_activity_hours',
      'field.storage.field_collection_item.field_headline',
      'field.storage.node.field_collection_activity_group',
      'field_collection.field_collection.field_collection_activity_group',
      'field_collection.field_collection.field_collection_activity_hours',
    ]
  );
}

/**
 * Facility CT Updates & Page.
 */
function ygs_master_update_8040() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.facility.default',
      'core.entity_view_display.node.branch.teaser',
      'core.entity_view_display.node.facility.default',
      'core.entity_view_display.node.facility.teaser',
      'core.entity_view_display.node.facility.title',
      'core.entity_view_display.node.facility.full',
      'core.entity_view_display.node.facility.sidebar',
      'field.field.node.facility.field_body_no_summary',
      'field.field.node.facility.field_facility_area',
      'field.field.node.facility.field_location',
      'field.storage.node.field_facility_area',
      'page_manager.page_variant.node_view-panels_variant-7',
      'taxonomy.vocabulary.facility_type',
    ]
  );
}

/**
 * Configure Camp page.
 */
function ygs_master_update_8041() {
  \Drupal::service('module_installer')->install(['ygs_camp'], TRUE);

  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.camp.default',
      'core.entity_view_display.node.camp.header_camp',
      'core.entity_view_display.node.camp.teaser',
      'core.entity_view_mode.node.header_camp',
      'page_manager.page_variant.node_view-panels_variant-3',
      'page_manager.page_variant.node_view-panels_variant-8',
      'paragraphs.paragraphs_type.branch_updates_queue',
    ]
  );
}

/**
 * Add popup link to panel variants.
 */
function ygs_master_update_8042() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'page_manager.page_variant.node_view-panels_variant-1',
      'page_manager.page_variant.node_view-panels_variant-2',
    ]
  );
}

/**
 * Configure Announcement CT Page.
 */
function ygs_master_update_8043() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'page_manager.page_variant.node_view-panels_variant-9',
    ]
  );
}

/**
 * Configure Announcement teaser.
 */
function ygs_master_update_8044() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.announcement.default',
      'core.entity_view_display.node.announcement.default',
      'core.entity_view_display.node.announcement.teaser',
      'field.field.node.announcement.field_blog_image',
      'node.type.announcement',
    ]
  );
}

/**
 * Configure Location specific alerts.
 */
function ygs_master_update_8045() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.facility.teaser',
      'page_manager.page_variant.node_view-panels_variant-2',
      'page_manager.page_variant.node_view-panels_variant-8',
      'views.view.header_alerts',
    ]
  );
}

/**
 * User Roles and Permissions: contributor and editor.
 */
function ygs_master_update_8046() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'content_moderation.state.archived',
      'content_moderation.state.needs_review',
      'content_moderation.state_transition.draft_needs_review',
      'content_moderation.state_transition.draft_published',
      'content_moderation.state_transition.needs_review_draft',
      'content_moderation.state_transition.needs_review_published',
      'content_moderation.state_transition.needs_review_needs_review',
      'node.type.activity',
      'node.type.alert',
      'node.type.announcement',
      'node.type.blog_post',
      'node.type.branch',
      'node.type.camp',
      'node.type.class',
      'node.type.facility',
      'node.type.landing_page',
      'node.type.membership',
      'node.type.program',
      'node.type.program_subcategory',
      'node.type.session',
      'system.action.user_add_role_action.contributor',
      'system.action.user_add_role_action.editor',
      'system.action.user_remove_role_action.contributor',
      'system.action.user_remove_role_action.editor',
      'user.role.contributor',
      'user.role.editor',
    ]
  );
  $role = Role::load('temp_landing_page');
  if ($role) {
    $role->delete();
  }
}

/**
 * Delete field_branch_queue.
 */
function ygs_master_update_8047() {
  $field = FieldStorageConfig::loadByName('node', 'field_branch_queue');
  $field->delete();
  field_purge_batch(1);
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.announcement.default',
      'core.entity_view_display.node.announcement.teaser',
      'core.entity_form_display.node.announcement.default',
    ]
  );
}

/**
 * Add popup to schedules page.
 */
function ygs_master_update_8048() {
  $path = \Drupal::service('path.alias_manager')->getPathByAlias('/schedules');
  $params = Url::fromUri('entity:' . ltrim($path, '/'))->getRouteParameters();
  if (isset($params['node'])) {
    $schedules_page = Node::load($params['node']);
    if ($schedules_page) {
      $paragraph = Paragraph::create([
        'type' => 'dynamic_content',
        'parent_id' => $schedules_page->id(),
        'parent_type' => 'node',
        'parent_field_name' => 'field_content',
        'status' => 1,
        'field_custom_block_reference' => 'location_popup_link_block',
      ]);
      $paragraph->save();
      $schedules_page->field_content->appendItem($paragraph);
      $schedules_page->save();
    }
  }
}

/**
 * Add fields to Session CT and class CT.
 */
function ygs_master_update_8049() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.class.default',
      'core.entity_view_display.node.class.default',
      'core.entity_view_display.node.class.sidebar',
      'core.entity_view_display.node.class.teaser',
      'core.entity_view_display.node.class.title',
      'field.field.node.class.field_external_id',
      'field.storage.node.field_external_id',
      'core.entity_form_display.node.session.default',
      'core.entity_view_display.node.session.default',
      'core.entity_view_display.node.session.registration',
      'core.entity_view_display.node.session.schedule',
      'core.entity_view_display.node.session.session_teaser',
      'core.entity_view_display.node.session.teaser',
      'field.field.node.session.field_external_id',
      'core.entity_form_display.sync_cache.sync_cache.default',
      'field.field.sync_cache.sync_cache.field_sync_errors',
      'field.storage.sync_cache.field_sync_errors',
      'views.view.sync_cache_dashboard',
      'field.field.node.session.field_sales_status',
      'field.storage.node.field_sales_status',
      'field.field.sync_cache.sync_cache.field_external_id',
      'field.storage.sync_cache.field_external_id',
    ]
  );
}

/**
 * HP Updates queue.
 */
function ygs_master_update_8050() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.field_collection_item.field_updates_queue_home.default',
      'core.entity_form_display.paragraph.frontpage_updates_queue.default',
      'core.entity_view_display.field_collection_item.field_updates_queue_home.default',
      'core.entity_view_display.paragraph.frontpage_updates_queue.default',
      'field.field.field_collection_item.field_updates_queue_home.field_updates_queue_locked',
      'field.field.field_collection_item.field_updates_queue_home.field_updates_queue_update',
      'field.field.paragraph.frontpage_updates_queue.field_updates_queue_home',
      'field.storage.paragraph.field_updates_queue_home',
      'field_collection.field_collection.field_updates_queue_home',
      'paragraphs.paragraphs_type.frontpage_updates_queue',
      'system.site',
      'field.field.node.blog_post.field_homepage_queue',
      'core.entity_view_display.node.blog_post.default',
      'core.entity_form_display.node.blog_post.default',
    ]
  );
  \Drupal::service('path.alias_storage')->save('/node/921', '/home');
}

/**
 * Simple paragraph updates.
 */
function ygs_master_update_8051() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.paragraph.simple_content.default',
    ]
  );
}

/**
 * Delete field_meetings_booked.
 */
function ygs_master_update_8052() {
  $field = FieldStorageConfig::loadByName('node', 'field_meetings_booked');
  $field->delete();
  field_purge_batch(1);
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.session.default',
      'core.entity_view_display.node.session.default',
      'core.entity_view_display.node.session.registration',
      'core.entity_view_display.node.session.schedule',
      'core.entity_view_display.node.session.session_teaser',
      'core.entity_view_display.node.session.teaser',
      'views.view.sync_cache_dashboard',
      'core.entity_form_display.mapping.facility.default',
      'core.entity_view_display.mapping.facility.default',
      'field.field.mapping.facility.field_facility_ct',
      'field.storage.mapping.field_facility_ct',
      'ymca_mappings.mapping_type.facility',
      'field.field.mapping.facility.field_flexreg_facility_name',
      'field.storage.mapping.field_flexreg_facility_name',
    ]
  );
}

/**
 * Remove duplicated header gallery from branch page.
 */
function ygs_master_update_8053() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.branch.default',
    ]
  );
}

/**
 * Media embed view modes.
 */
function ygs_master_update_8054() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_mode.media.embedded_image',
      'core.entity_view_mode.media.embedded_video',
    ]
  );
}

/**
 * Configure Global search page.
 */
function ygs_master_update_8055() {
  \Drupal::service('module_installer')->install(['search_api_db'], TRUE);

  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'search_api.index.content',
      'search_api.server.content',
      'search_api.settings',
      'search_api_db.settings',
      'views.view.global_search',
    ]
  );
}

/**
 * Add activenet_sync default config.
 */
function ygs_master_update_8056() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'activenet_sync.settings',
      'ymca_sync.settings',
      // Add field_physical_location_text to session CT.
      'core.entity_form_display.node.session.default',
      'core.entity_view_display.node.session.default',
      'core.entity_view_display.node.session.registration',
      'core.entity_view_display.node.session.schedule',
      'core.entity_view_display.node.session.session_teaser',
      'core.entity_view_display.node.session.teaser',
      'field.field.node.session.field_physical_location_text',
      'field.storage.node.field_physical_location_text',
    ]
  );
}

/**
 * Media embed view modes.
 */
function ygs_master_update_8057() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.media_library',
    ]
  );
}

/**
 * Remove total info from views header.
 */
function ygs_master_update_8058() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.sync_cache_dashboard',
    ]
  );
}

/**
 * Node titles, site favicon.
 */
function ygs_master_update_8059() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'page_manager.page_variant.node_view-panels_variant-0',
      'page_manager.page_variant.node_view-panels_variant-1',
      'page_manager.page_variant.node_view-panels_variant-2',
      'page_manager.page_variant.node_view-panels_variant-3',
      'page_manager.page_variant.node_view-panels_variant-4',
      'page_manager.page_variant.node_view-panels_variant-5',
      'page_manager.page_variant.node_view-panels_variant-6',
      'page_manager.page_variant.node_view-panels_variant-7',
      'page_manager.page_variant.node_view-panels_variant-8',
      'page_manager.page_variant.node_view-panels_variant-9',
      'system.theme.global',
    ]
  );
}

/**
 * Move field_updated_data from session CT to sync_cache entity.
 */
function ygs_master_update_8060() {
  $field = FieldStorageConfig::loadByName('node', 'field_updated_data');
  $field->delete();
  field_purge_batch(1);
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.session.default',
      'core.entity_view_display.node.session.default',
      'core.entity_view_display.node.session.registration',
      'core.entity_view_display.node.session.schedule',
      'core.entity_view_display.node.session.session_teaser',
      'core.entity_view_display.node.session.teaser',
      'core.entity_form_display.sync_cache.sync_cache.default',
      'field.field.sync_cache.sync_cache.field_updated_date',
      'field.storage.sync_cache.field_updated_date',
    ]
  );
}

/**
 * Update activenet_sync config.
 */
function ygs_master_update_8061() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'activenet_sync.settings',
      'ymca_sync.settings',
    ]
  );
}

/**
 * Add Camps paragraph block to "Locations" page.
 */
function ygs_master_update_8062() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.locations',
    ]
  );
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'landing_page')
    ->condition('title', 'Locations');
  $locations_page_id = $query->execute();
  $locations_page_id = reset($locations_page_id);
  if (!empty($locations_page_id)) {
    $locations_page = \Drupal::entityTypeManager()->getStorage('node')->load($locations_page_id);
    $paragraphs = [
      'views_block:locations-ygs_locations_branches_block',
      'views_block:locations-ygs_locations_camps_block',
      'views_block:locations-ygs_locations_facilities_block',
    ];
    foreach ($paragraphs as $pname) {
      $paragraph = Paragraph::create([
        'type' => 'dynamic_content',
        'parent_id' => $locations_page->id(),
        'parent_type' => 'node',
        'parent_field_name' => 'field_content',
        'status' => 1,
        'field_custom_block_reference' => $pname,
      ]);
      $paragraph->save();
      $query = \Drupal::entityQuery('paragraph')
        ->condition('type', 'dynamic_content')
        ->condition('parent_id', $locations_page_id)
        ->condition('field_custom_block_reference', $pname);
      $paragraph_id = $query->execute();
      $paragraph_id = reset($paragraph_id);
      $paragraph = \Drupal::entityTypeManager()->getStorage('paragraph')->load($paragraph_id);
      $revision_id = $paragraph->get('revision_id')->getValue();
      $updated_field_content[] = [
        'target_id' => $paragraph->id(),
        'target_revision_id' => $revision_id[0]['value'],
      ];
    }
    $locations_page->field_content->setValue($updated_field_content);
    $locations_page->save();
  }
}

/**
 * Reimport anonymous user permissions.
 */
function ygs_master_update_8063() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'user.role.anonymous',
    ]
  );
}

/**
 * SEO configurations.
 */
function ygs_master_update_8064() {
  \Drupal::service('module_installer')->install(
    [
      'redirect',
      'metatag',
      'metatag_open_graph',
      'xmlsitemap',
      'acquia_connector',
    ],
    TRUE
  );
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'acquia_connector.settings',
      'core.entity_form_display.node.landing_page.default',
      'core.entity_view_display.node.landing_page.default',
      'field.field.node.landing_page.field_metatags',
      'field.storage.node.field_metatags',
      'metatag.metatag_defaults.403',
      'metatag.metatag_defaults.404',
      'metatag.metatag_defaults.front',
      'metatag.metatag_defaults.global',
      'metatag.metatag_defaults.node',
      'metatag.metatag_defaults.taxonomy_term',
      'metatag.metatag_defaults.user',
      'redirect.settings',
      'views.view.redirect',
      'xmlsitemap.settings.node.activity',
      'xmlsitemap.settings.node.blog_post',
      'xmlsitemap.settings.node.branch',
      'xmlsitemap.settings.node.camp',
      'xmlsitemap.settings.node.class',
      'xmlsitemap.settings.node.facility',
      'xmlsitemap.settings.node.landing_page',
      'xmlsitemap.settings.node.program',
      'xmlsitemap.settings.node.program_subcategory',
      'xmlsitemap.settings.node.session',
      'xmlsitemap.settings',
    ]
  );
}

/**
 * Update sync_cache dashboard.
 */
function ygs_master_update_8065() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.sync_cache.sync_cache.default',
      'core.entity_view_display.sync_cache.sync_cache.default',
      'views.view.sync_cache_dashboard',
    ]
  );
}

/**
 * Enable module ygs_salesforce_mc.
 */
function ygs_master_update_8066() {
  // Enable ygs_salesforce_mc module.
  \Drupal::service('module_installer')->install(array('ygs_salesforce_mc'), TRUE);
  // Create custom blocks.
  $blockEntityManager = \Drupal::service('entity.manager')->getStorage('block');

  $new_blocks = [
    'footersociallinks' => [
      'info' => 'Footer social links',
      'weight' => 1,
      'body' => '<ul class="list-inline">
        <li><a class="fa fa-facebook" href="">facebook</a></li>
        <li><a class="fa fa-twitter" href="">twitter</a></li>
        <li><a class="fa fa-youtube" href="">youtube</a></li>
      </ul>',
    ],
    'footercopyright' => [
      'info' => 'Footer copyright',
      'weight' => 20,
      'body' => '<p>© 2016 Greater Seattle YMCA</p>
        <p>The YMCA is a 501(c)(3) not-for-profit social services organization dedicated to Youth Development, Healthy Living, and Social Responsibility.</p>',
    ],
  ];

  foreach ($new_blocks as $id => $item) {
    $block_content = BlockContent::create(array(
      'info' => $item['info'],
      'type' => 'basic_block',
      'langcode' => 'en',
      'body' => [
        'format' => 'full_html',
        'value' => $item['body'],
      ],
    ));
    $block_content->save();
    $block = $blockEntityManager->create(
      array(
        'id' => $id,
        'plugin' => 'block_content:' . $block_content->uuid(),
        'theme' => 'ymca_seattle',
        'weight' => $item['weight'],
      )
    );
    $block->setRegion('footer_social');
    $block->save();
  }

  // Delete block footersocial.
  $footersocial = entity_load('block', 'footersocial');
  $footersocial->delete();

  // Update config.
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'block.block.footersubscribeform',
    ]
  );
}

/**
 * Enable yamlform modules.
 */
function ygs_master_update_8067() {
  \Drupal::service('module_installer')->install([
    'yamlform',
    'yamlform_templates',
    'yamlform_ui',
  ], TRUE);

  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'yamlform.settings',
      'yamlform.yamlform.contact',
      'yamlform.yamlform.guest_pass_form',
    ]
  );
}

/**
 * Update field_day_of_the_week in field_collection_hours.
 */
function ygs_master_update_8068() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.field_collection_item.field_collection_hours.field_day_of_the_week',
      'field.field.node.facility.field_collection_hours',
    ]
  );
}

/**
 * Membership configs.
 */
function ygs_master_update_8069() {
  \Drupal::service('module_installer')->install(['ygs_membership'], TRUE);

  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'ygs_membership.settings',
      'field.field.field_collection_item.field_membership_info.field_join_fee',
      'field.field.field_collection_item.field_membership_info.field_monthly_rate',
      'views.view.membership',
    ]
  );
}

/**
 * Modify announcement link field.
 */
function ygs_master_update_8070() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.announcement.default',
      'core.entity_view_display.node.announcement.teaser',
    ]
  );
}

/**
 * Create new paragraph type (Form).
 */
function ygs_master_update_8071() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.paragraph.form.default',
      'core.entity_view_display.paragraph.form.default',
      'field.field.paragraph.form.field_paragraph_form',
      'field.storage.paragraph.field_paragraph_form',
      'paragraphs.paragraphs_type.form',
    ]
  );
}

/**
 * Enable ygs_session_instance.
 */
function ygs_master_update_8072() {
  \Drupal::service('module_installer')->install(['ygs_session_instance'], TRUE);
}

/**
 * Disable node preview.
 */
function ygs_master_update_8073() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'node.type.activity',
      'node.type.alert',
      'node.type.announcement',
      'node.type.blog_post',
      'node.type.branch',
      'node.type.camp',
      'node.type.class',
      'node.type.facility',
      'node.type.landing_page',
      'node.type.membership',
      'node.type.program',
      'node.type.program_subcategory',
      'node.type.session',
    ]
  );
}

/**
 * Add moderation actions to admin/content page.
 */
function ygs_master_update_8074() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'system.action.workbench_moderation_node_publish_action',
      'system.action.workbench_moderation_node_unpublish_action',
    ]
  );
}

/**
 * Update ygs_salesforce_mc.settings.
 */
function ygs_master_update_8075() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'ygs_salesforce_mc.settings',
    ]
  );
}

/**
 * Add modules to enable tracking via GTM.
 */
function ygs_master_update_8076() {
  \Drupal::service('module_installer')->install(
    [
      'google_tag',
      'ymca_analytics',
    ]
  );
}

/**
 * Disable user registration.
 */
function ygs_master_update_8077() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'user.settings',
    ]
  );
}

/**
 * Add Responsive Images support.
 */
function ygs_master_update_8078() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.media.image.blog_page',
      'core.entity_view_display.media.image.blog_teaser',
      'core.entity_view_display.media.image.images_gallery',
      'core.entity_view_display.media.image.program_header',
      'core.entity_view_display.media.image.subprogram_teaser',
      'crop.type.blog_featured',
      'crop.type.blog_featured_2x',
      'crop.type.blog_post',
      'crop.type.blog_post_2x',
      'crop.type.gallery',
      'crop.type.gallery_2x',
      'crop.type.gallery_2x_mobile',
      'crop.type.gallery_mobile',
      'crop.type.program_header',
      'crop.type.program_header_2x',
      'crop.type.subprogram_teaser',
      'crop.type.subprogram_teaser_2x',
      'crop.type.subprogram_teaser_mobile',
      'crop.type.subprogram_teaser_mobile_2x',
      'image.style.blog_featured',
      'image.style.blog_featured_2x',
      'image.style.blog_post',
      'image.style.blog_post_2x',
      'image.style.gallery',
      'image.style.gallery_2x',
      'image.style.gallery_2x_mobile',
      'image.style.gallery_mobile',
      'image.style.program_header',
      'image.style.program_header_2x',
      'image.style.subprogram_teaser',
      'image.style.subprogram_teaser_2x',
      'image.style.subprogram_teaser_2x_mobile',
      'image.style.subprogram_teaser_mobile',
      'responsive_image.styles.blog_post',
      'responsive_image.styles.blog_teaser',
      'responsive_image.styles.gallery',
      'responsive_image.styles.programs_header',
      'responsive_image.styles.subprogram_teaser',
      'core.entity_view_display.node.membership.default',
      'core.entity_view_display.node.membership.full',
      'crop.type.banner_image',
      'crop.type.banner_image_2x',
      'crop.type.banner_image_2x_mobile',
      'crop.type.banner_image_mobile',
      'image.style.banner_image_2x',
      'image.style.banner_image_2x_mobile',
      'responsive_image.styles.banner_image',
      'image.style.banner_image',
      'image.style.banner_image_mobile',
      'crop.type.membership_card',
      'crop.type.membership_card_2x',
      'image.style.membership_card',
      'image.style.membership_card_2x',
      'responsive_image.styles.membership_cards',
      'core.entity_view_display.media.image.thumb_262_233',
    ]
  );
}

/**
 * Update guest_pass_form config.
 */
function ygs_master_update_8079() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'yamlform.yamlform.guest_pass_form',
    ]
  );
}

/**
 * Update the classes view.
 */
function ygs_master_update_8080() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.sub_category_classes',
    ]
  );
}

/**
 * Remove nodes of Acitivity and Session CT from sitemap.
 */
function ygs_master_update_8081() {
  \Drupal::configFactory()->getEditable('xmlsitemap.settings.node.activity')->delete();
  \Drupal::configFactory()->getEditable('xmlsitemap.settings.node.session')->delete();
}

/**
 * Add view_unpublished.
 */
function ygs_master_update_8082() {
  \Drupal::service('module_installer')->install(array('view_unpublished'), TRUE);
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'user.role.editor',
      'user.role.contributor',
    ]
  );
}

/**
 * Add chosen module.
 */
function ygs_master_update_8083() {
  \Drupal::service('module_installer')->install(
    [
      'chosen_lib',
      'chosen',
      'chosen_field',
    ]
  );

  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'chosen.settings',
      'field.field.media.document.field_media_tag',
      'field.field.media.image.field_media_tag',
      'field.field.media.instagram.field_media_tag',
      'field.field.media.tweet.field_media_tag',
      'field.field.media.video.field_media_tag',
      'field.storage.media.field_media_tag',
      'taxonomy.vocabulary.media_tags',
      'core.entity_form_display.media.document.default',
      'core.entity_form_display.media.image.default',
      'core.entity_form_display.media.instagram.default',
      'core.entity_form_display.media.tweet.default',
      'core.entity_form_display.media.video.default',
      'core.entity_form_display.node.branch.default',
      'core.entity_view_display.media.document.default',
      'core.entity_view_display.media.image.default',
      'core.entity_view_display.media.instagram.default',
      'core.entity_view_display.media.tweet.default',
      'core.entity_view_display.media.video.default',
      'views.view.media_library',
      'core.entity_view_display.media.image.blog_page',
      'core.entity_view_display.media.image.blog_teaser',
      'core.entity_view_display.media.image.images_gallery',
      'core.entity_view_display.media.image.program_header',
      'core.entity_view_display.media.image.subprogram_teaser',
      'core.entity_view_display.media.image.thumb_262_233',
    ]
  );
}

/**
 * Change homepage, 403, 404 pages settings.
 */
function ygs_master_update_8084() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'system.site',
    ]
  );
}

/**
 * Install Flood Unblock module & fix views permissions.
 */
function ygs_master_update_8085() {
  \Drupal::service('module_installer')->install(
    [
      'flood_unblock',
    ]
  );

  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.mapping_content',
      'views.view.media_library',
    ]
  );
}

/**
 * Allow activity field to set multiple values, recreate session instances.
 */
function ygs_master_update_8086(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $importer = \Drupal::service('config_import.importer');
    $importer->setDirectory(YGS_CONFDIR);
    $importer->importConfigs(
      [
        'field.storage.node.field_activity',
        'core.entity_form_display.session_instance.session_instance.default',
        'field.field.session_instance.session_instance.field_activity',
        'field.field.session_instance.session_instance.field_program',
        'field.field.session_instance.session_instance.field_program_subcategory',
        'field.storage.session_instance.field_activity',
        'field.storage.session_instance.field_program',
        'field.storage.session_instance.field_program_subcategory',
        'pathauto.pattern.class_alias_pattern',
      ]
    );

    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = \Drupal::entityQuery('node')
      ->condition('type', 'session')
      ->count()
      ->execute();
  }

  // Recreate session instances in chunks of 20 sessions.
  $ids = \Drupal::entityQuery('node')
    ->condition('type', 'session')
    ->condition('nid', $sandbox['current'], '>')
    ->range(0, 20)
    ->sort('nid')
    ->execute();
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($ids);
  foreach ($nodes as $node) {
    \Drupal::service('session_instance.manager')->recreateSessionInstances($node);
    $sandbox['progress']++;
    $sandbox['current'] = $node->id();
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  // To display a message to the user when the update is completed, return it.
  // If you do not want to display a completion message, return nothing.
  return t('Session instances were created for @count session nodes', ['@count' => $sandbox['max']]);
}

/**
 * Add to session CT field_allow_waitlist.
 */
function ygs_master_update_8087() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.node.session.field_allow_waitlist',
      'field.storage.node.field_allow_waitlist',
    ]
  );
}

/**
 * Add new fields to session CT.
 */
function ygs_master_update_8088() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.session.default',
      'core.entity_view_display.node.session.default',
      'field.field.node.session.field_online_registration_date',
      'field.field.node.session.field_standard_registration_date',
      'field.storage.node.field_online_registration_date',
      'field.storage.node.field_standard_registration_date',
    ]
  );
}

/**
 * Update Class teaser trim formatter.
 */
function ygs_master_update_8089() {
  \Drupal::service('module_installer')->install(
    [
      'smart_trim',
    ]
  );
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.class.teaser',
    ]
  );
}

/**
 * Add field_raw_data_hash to sync_cache entity.
 */
function ygs_master_update_8090() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.sync_cache.sync_cache.default',
      'core.entity_view_display.sync_cache.sync_cache.default',
      'field.field.sync_cache.sync_cache.field_raw_data_hash',
      'field.storage.sync_cache.field_raw_data_hash',
    ]
  );
}

/**
 * Add smart_trim to membership teaser.
 */
function ygs_master_update_8091() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.membership.teaser',
    ]
  );
}

/**
 * Add age taxonomy functionality.
 */
function ygs_master_update_8092() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'taxonomy.vocabulary.age',
      'field.storage.taxonomy_term.field_min_age',
      'field.storage.taxonomy_term.field_max_age',
      'field.field.taxonomy_term.age.field_min_age',
      'field.field.taxonomy_term.age.field_max_age',
      'core.entity_form_display.taxonomy_term.age.default',
      'core.entity_view_display.taxonomy_term.age.default',
    ]
  );
  $terms_to_be_created = [
    0 => [
      'name' => 'Adult',
      'min_age' => 21,
    ],
    1 => [
      'name' => 'Adult and Child',
      'min_age' => 0,
    ],
    2 => [
      'name' => 'Teen',
      'min_age' => 13,
      'max_age' => 20,
    ],
    3 => [
      'name' => 'Youth',
      'min_age' => 13,
      'max_age' => 7,
    ],
    4 => [
      'name' => 'Early Childhood',
      'min_age' => 0,
      'max_age' => 6,
    ],
  ];
  foreach ($terms_to_be_created as $data) {
    $term = Term::create([
      'vid' => 'age',
      'name' => $data['name'],
      'field_min_age' => $data['min_age'],
      'field_max_age' => $data['max_age'],
    ]);
    $term->save();
  }
}

/**
 * Recreate session instances with Age reference.
 */
function ygs_master_update_8093(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $importer = \Drupal::service('config_import.importer');
    $importer->setDirectory(YGS_CONFDIR);
    $importer->importConfigs(
      [
        'field.field.session_instance.session_instance.field_age',
        'field.storage.session_instance.field_age',
        'core.entity_form_display.session_instance.session_instance.default',
      ]
    );

    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = \Drupal::entityQuery('node')
      ->condition('type', 'session')
      ->count()
      ->execute();
  }

  // Recreate session instances in chunks of 20 sessions.
  $ids = \Drupal::entityQuery('node')
    ->condition('type', 'session')
    ->condition('nid', $sandbox['current'], '>')
    ->range(0, 20)
    ->sort('nid')
    ->execute();
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($ids);
  foreach ($nodes as $node) {
    \Drupal::service('session_instance.manager')->recreateSessionInstances($node);
    $sandbox['progress']++;
    $sandbox['current'] = $node->id();
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  // To display a message to the user when the update is completed, return it.
  // If you do not want to display a completion message, return nothing.
  return t('Session instances were created for @count session nodes', ['@count' => $sandbox['max']]);
}

/**
 * Deny users to post submission from a dedicated URL.
 */
function ygs_master_update_8094() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'yamlform.yamlform.guest_pass_form',
    ]
  );
}

/**
 * Update hours formatters.
 */
function ygs_master_update_8095() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.branch.teaser',
      'core.entity_view_display.node.facility.teaser',
    ]
  );
}

/**
 * Changed Metatag title config for frontpage.
 */
function ygs_master_update_8096() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'metatag.metatag_defaults.front',
    ]
  );
}

/**
 * Changed view modes to use Plain formatter for address.
 */
function ygs_master_update_8097() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.branch.header_branch',
      'core.entity_view_display.node.camp.header_camp',
      'core.entity_view_display.node.facility.sidebar',
    ]
  );
}

/**
 * Close activity page from anonymous users.
 */
function ygs_master_update_8098() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'page_manager.page_variant.node_view-panels_variant-6',
    ]
  );
}

/**
 * Re-import configs.
 */
function ygs_master_update_8099() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.node.camp.field_content',
      'user.role.authenticated',
      'views.view.blog',
      'core.entity_view_display.node.facility.teaser',
      'core.entity_view_display.node.branch.teaser',
    ]
  );
}

/**
 * Update media view modes.
 */
function ygs_master_update_8100() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.media.document.link',
      'core.entity_view_display.media.image.embedded_full',
      'core.entity_view_display.media.image.link',
      'core.entity_view_display.media.video.embedded_full',
      'core.entity_view_display.media.video.link',
      'core.entity_view_mode.media.embedded_full',
      'core.entity_view_mode.media.link',
      'embed.button.media',
    ]
  );
}

/**
 * Added help text for the Directions field.
 */
function ygs_master_update_8101() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.node.branch.field_directions',
      'field.field.node.camp.field_directions',
      'field.field.node.facility.field_directions',
    ]
  );
}

/**
 * Update sub_category_classes view.
 */
function ygs_master_update_8102() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.sub_category_classes',
    ]
  );
}

/**
 * Add Spots allowed field to the Session CT.
 */
function ygs_master_update_8103() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.node.session.field_spots_allowed',
      'field.storage.node.field_spots_allowed',
      'core.entity_form_display.node.session.default',
      'core.entity_view_display.node.session.default',
    ]
  );
}

/**
 * Enable captcha.
 */
function ygs_master_update_8104() {
  \Drupal::service('module_installer')->install(
    [
      'captcha',
      'recaptcha',
    ]
  );
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'captcha.captcha_point.contact_message_feedback_form',
      'captcha.captcha_point.contact_message_personal_form',
      'captcha.captcha_point.node_activity_form',
      'captcha.captcha_point.node_alert_form',
      'captcha.captcha_point.node_announcement_form',
      'captcha.captcha_point.node_blog_post_form',
      'captcha.captcha_point.node_branch_form',
      'captcha.captcha_point.node_camp_form',
      'captcha.captcha_point.node_class_form',
      'captcha.captcha_point.node_facility_form',
      'captcha.captcha_point.node_forum_form',
      'captcha.captcha_point.node_landing_page_form',
      'captcha.captcha_point.node_membership_form',
      'captcha.captcha_point.node_program_form',
      'captcha.captcha_point.node_program_subcategory_form',
      'captcha.captcha_point.node_session_form',
      'captcha.captcha_point.user_login_form',
      'captcha.captcha_point.user_pass',
      'captcha.captcha_point.user_register_form',
      'captcha.settings',
      'recaptcha.settings',
      'yamlform.yamlform.guest_pass_form',
    ]
  );
}

/**
 * Adjust Chosen selector.
 */
function ygs_master_update_8105() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'chosen.settings',
    ]
  );
}

/**
 * Update media link view modes.
 */
function ygs_master_update_8106() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.media.image.link',
      'core.entity_view_display.media.video.default',
      'core.entity_view_display.media.video.link',
      'core.entity_view_display.media.document.default',
      'core.entity_view_display.media.document.link',
    ]
  );
}

/**
 * Add GTM code.
 */
function ygs_master_update_8107() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'google_tag.settings',
    ]
  );
}

/**
 * Enable memcache.
 */
function ygs_master_update_8108() {
  \Drupal::service('module_installer')->install(
    [
      'memcache',
    ]
  );
}

/**
 * Add Tier fields to Class CT.
 */
function ygs_master_update_8109() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.node.class.field_tier_1',
      'field.field.node.class.field_tier_2',
      'field.field.node.class.field_tier_3',
      'field.storage.node.field_tier_1',
      'field.storage.node.field_tier_2',
      'field.storage.node.field_tier_3',
      'core.entity_form_display.node.class.default',
      'core.entity_view_display.node.class.default',
    ]
  );
}

/**
 * Fix image linking in Program Subcategories listing on Program CT page.
 */
function ygs_master_update_8110() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.media.image.subprogram_teaser',
    ]
  );
}

/**
 * Change Crop Hard limit to Soft limit.
 */
function ygs_master_update_8111() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'crop.type.banner_image',
      'crop.type.banner_image_2x',
      'crop.type.banner_image_2x_mobile',
      'crop.type.banner_image_mobile',
      'crop.type.blog_featured',
      'crop.type.blog_featured_2x',
      'crop.type.blog_post',
      'crop.type.blog_post_2x',
      'crop.type.gallery',
      'crop.type.gallery_2x',
      'crop.type.gallery_2x_mobile',
      'crop.type.gallery_mobile',
      'crop.type.membership_card',
      'crop.type.membership_card_2x',
      'crop.type.program_header',
      'crop.type.program_header_2x',
      'crop.type.subprogram_teaser',
      'crop.type.subprogram_teaser_2x',
      'crop.type.subprogram_teaser_mobile',
      'crop.type.subprogram_teaser_mobile_2x',
    ]
  );
}

/**
 * Update field_session_frequency values.
 */
function ygs_master_update_8112() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.storage.field_collection_item.field_session_frequency',
    ]
  );
}

/**
 * Update Program Subcategories listing on Program page.
 */
function ygs_master_update_8113() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.settings',
      'views.view.program_subcategories',
    ]
  );
}

/**
 * Remove smart_trim from membership teaser.
 */
function ygs_master_update_8114() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.membership.teaser',
    ]
  );
}

/**
 * Update Program Subcategory view.
 */
function ygs_master_update_8115() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.sub_category_classes',
    ]
  );
}

/**
 * Recreate session instances.
 */
function ygs_master_update_8116(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = \Drupal::entityQuery('node')
      ->condition('type', 'session')
      ->count()
      ->execute();
  }

  // Recreate session instances in chunks of 20 sessions.
  $ids = \Drupal::entityQuery('node')
    ->condition('type', 'session')
    ->condition('nid', $sandbox['current'], '>')
    ->range(0, 20)
    ->sort('nid')
    ->execute();
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($ids);
  foreach ($nodes as $node) {
    \Drupal::service('session_instance.manager')->recreateSessionInstances($node);
    $sandbox['progress']++;
    $sandbox['current'] = $node->id();
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  // To display a message to the user when the update is completed, return it.
  // If you do not want to display a completion message, return nothing.
  return t('Session instances were created for @count session nodes', ['@count' => $sandbox['max']]);
}

/**
 * Remove location popup block form branch page.
 */
function ygs_master_update_8117() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'page_manager.page_variant.node_view-panels_variant-2',
    ]
  );
}

/**
 * Enable custom metatags for Branch, Camp, Program and Program Subcategory CTs.
 */
function ygs_master_update_8118() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.node.branch.field_metatags',
      'field.field.node.camp.field_metatags',
      'field.field.node.program.field_metatags',
      'field.field.node.program_subcategory.field_metatags',
      'core.entity_form_display.node.branch.default',
      'core.entity_form_display.node.camp.default',
      'core.entity_form_display.node.program.default',
      'core.entity_form_display.node.program_subcategory.default',
      'core.entity_view_display.node.branch.default',
      'core.entity_view_display.node.camp.default',
      'core.entity_view_display.node.program.default',
      'core.entity_view_display.node.program_subcategory.default',
    ]
  );
}

/**
 * Update category links rendering on Blog post CT.
 */
function ygs_master_update_8119() {
  // Clear all plugin caches.
  \Drupal::service('plugin.cache_clearer')->clearCachedDefinitions();

  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.blog_post.full',
      'views.view.blog',
    ]
  );
}

/**
 * Update DW table.
 */
function ygs_master_update_8120() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'datawarehouse_client.settings',
    ]
  );
}

/**
 * Update membership page appearance for mobile and tablet.
 */
function ygs_master_update_8121() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.membership',
    ]
  );
}

/**
 * Update media views.
 */
function ygs_master_update_8122() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.media_library',
    ]
  );
}

/**
 * Update Blog post teaser view mode (category link).
 */
function ygs_master_update_8123() {
  // Clear all plugin caches.
  \Drupal::service('plugin.cache_clearer')->clearCachedDefinitions();

  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.blog_post.teaser',
    ]
  );
}

/**
 * Install hotjar module.
 */
function ygs_master_update_8124() {
  \Drupal::service('module_installer')->install(array('hotjar'), TRUE);

  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'hotjar.settings',
    ]
  );
}

/**
 * Install protected_pages module.
 */
function ygs_master_update_8125() {
  \Drupal::service('module_installer')->install(['protected_pages'], TRUE);
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'user.role.anonymous',
      'user.role.authenticated',
    ]
  );
}

/**
 * Create class sessions views.
 */
function ygs_master_update_8126() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.sessions',
    ]
  );
}

/**
 * Enable ygs_page_cache module.
 */
function ygs_master_update_8127() {
  \Drupal::service('module_installer')->install(['ygs_page_cache'], TRUE);
}

/**
 * Override Session Instances listing with a view.
 */
function ygs_master_update_8128() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.session_instances_listing',
    ]
  );
}

/**
 * Update view.
 */
function ygs_master_update_8129() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.sub_category_classes',
    ]
  );
}

/**
 * Delete field_contact_details.
 */
function ygs_master_update_8130() {
  $field = FieldStorageConfig::loadByName('node', 'field_contact_details');
  $field->delete();
  field_purge_batch(1);
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.announcement.default',
      'core.entity_view_display.node.announcement.teaser',
      'core.entity_form_display.node.announcement.default',
      'core.entity_form_display.node.branch.default',
      'core.entity_view_display.node.branch.default',
      'core.entity_view_display.node.branch.header_branch',
      'core.entity_view_display.node.branch.teaser',
      'field.field.node.branch.field_ticket_required_info',
      'field.storage.node.field_ticket_required_info',
    ]
  );
}

/**
 * Make latitude and longitude fields required for Branch, Camp, Facility CTs.
 */
function ygs_master_update_8131() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.node.branch.field_latitude',
      'field.field.node.branch.field_longitude',
      'field.field.node.camp.field_latitude',
      'field.field.node.camp.field_longitude',
      'field.field.node.facility.field_latitude',
      'field.field.node.facility.field_longitude',
    ]
  );
}

/**
 * Update Program header image style.
 */
function ygs_master_update_8132() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'image.style.program_header',
    ]
  );
}

/**
 * Allow blog queue entity to render draft.
 */
function ygs_master_update_8133() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.field_collection_item.field_updates_queue_home.default',
      'core.entity_view_display.field_collection_item.field_updates_queue_item_collect.default',
    ]
  );
}

/**
 * Add field_age to class.
 */
function ygs_master_update_8134() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.class.default',
      'core.entity_view_display.node.class.default',
      'field.field.node.class.field_age',
      'field.storage.node.field_age',
    ]
  );
}

/**
 * Modify global_search views filter.
 */
function ygs_master_update_8135() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'search_api.index.content',
      'views.view.global_search',
      'page_manager.page_variant.node_view-http_status_code-0',
    ]
  );
}

/**
 * Add field_age to sub_category_classes views.
 */
function ygs_master_update_8136() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.sub_category_classes',
    ]
  );
}

/**
 * Modify blog views.
 */
function ygs_master_update_8137() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'views.view.blog',
    ]
  );
}

/**
 * Enables the article pager and reverts relevant settings.
 */
function ygs_master_update_8138() {
  \Drupal::service('module_installer')->install(['ygs_article_pager']);
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'page_manager.page_variant.node_view-panels_variant-5',
    ]
  );
}

/**
 * Disable Content moderation for Session CT.
 */
function ygs_master_update_8139() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'node.type.session',
    ]
  );
}

/**
 * Make field_headline and field_start_end_time required.
 */
function ygs_master_update_8140() {
  \Drupal::service('module_installer')->install(['ygs_article_pager']);
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.field_collection_item.field_collection_activity_group.field_headline',
      'field.field.field_collection_item.field_collection_activity_hours.field_start_end_time',
    ]
  );
}

/**
 * Delete classes duplicates.
 */
function ygs_master_update_8141() {
  global $_activenet_sync_disable_entity_hooks;
  $_activenet_sync_disable_entity_hooks = TRUE;
  $queue = \Drupal::queue('activenet_sync_proceed_imported_nodes');
  // Get titles of duplicated classes.
  $query = db_select('node_field_data', 'n')
    ->condition('n.type', 'class')
    ->condition('n.status', 1)
    ->groupBy('hex')
    ->having('COUNT(*) > 1')
    ->orderBy('n.title', 'DESC');
  $alias = $query->addExpression('HEX(title)', 'hex');
  $alias = $query->addExpression('MAX(title)', 'title');
  $results = $query->execute();

  foreach ($results as $result) {
    $base_class_id = NULL;
    // Get duplicates ID's for each title.
    $class_ids = \Drupal::entityQuery('node')
      ->condition('type', 'class')
      ->condition('title', $result->title)
      ->condition('status', 1)
      ->condition('field_type', 'activity')
      ->sort('nid')
      ->execute();

    if (!$class_ids || count($class_ids) == 1) {
      continue;
    }

    // Get first class (this class will replace others in entities).
    $base_class_id = array_shift($class_ids);

    // Load sessions, related to this class.
    $sessions_ids = \Drupal::entityQuery('node')
      ->condition('type', 'session')
      ->condition('field_class', $class_ids, 'IN')
      ->sort('nid')
      ->execute();
    $sessions = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadMultiple($sessions_ids);
    foreach ($sessions as $session) {
      // Modify session field_class.
      $session->set('field_class', $base_class_id);
      $session->save();
      // Add this session to queue for recreating session instances.
      $queue->createItem(['nid' => $session->id(), 'type' => 'session']);
    }

    // Load sync cache entities, related to this class.
    $sync_cache_ids = \Drupal::entityQuery('sync_cache')
      ->condition('type', 'activenet')
      ->condition('class', $class_ids, 'IN')
      ->sort('id')
      ->execute();
    $sync_caches = \Drupal::entityTypeManager()
      ->getStorage('sync_cache')
      ->loadMultiple($sync_cache_ids);
    foreach ($sync_caches as $sync_cache) {
      // Modify sync cache entity class.
      $sync_cache->set('class', $base_class_id);
      $sync_cache->set('field_raw_data_hash', NULL);
      $sync_cache->save();
    }

    // Load duplicated classes and delete them.
    $classes_for_delete = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadMultiple($class_ids);
    foreach ($classes_for_delete as $class) {
      $class->delete();
    }
    // Add class to queue (Recalculate ages).
    $queue->createItem(['nid' => $base_class_id, 'type' => 'class']);
  }
  $_activenet_sync_disable_entity_hooks = FALSE;
}

/**
 * Enable metatags for Blog CT.
 */
function ygs_master_update_8142() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.blog_post.default',
      'core.entity_view_display.node.blog_post.default',
      'field.field.node.blog_post.field_metatags',
    ]
  );
}

/**
 * Branch CT - Coming Soon update.
 */
function ygs_master_update_8143() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.node.branch.field_temporary_url',
      'field.storage.node.field_temporary_url',
      'core.entity_form_display.node.branch.default',
      'core.entity_view_display.node.branch.default',
    ]
  );
}

/**
 * Unlink Neighborhood taxonomy field on branch teasers.
 */
function ygs_master_update_8144() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.branch.teaser',
    ]
  );
}

/**
 * Enables Page Access module.
 */
function ygs_master_update_8145() {
  \Drupal::service('module_installer')->install(['page_access']);

}

/**
 * Remove display of layout field on landing pages.
 */
function ygs_master_update_8146() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.node.landing_page.default',
    ]
  );
}

/**
 * Modify flexreg sessions external Id's.
 */
function ygs_master_update_8148(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = \Drupal::entityQuery('sync_cache')
      ->condition('type', 'flexreg')
      ->count()
      ->execute();
  }

  global $_activenet_sync_disable_entity_hooks;
  $_activenet_sync_disable_entity_hooks = TRUE;

  // Update sync_cache session in chunks of 20 entities.
  $ids = \Drupal::entityQuery('sync_cache')
    ->condition('type', 'flexreg')
    ->condition('id', $sandbox['current'], '>')
    ->range(0, 20)
    ->sort('id')
    ->execute();
  $sync_caches = \Drupal::entityTypeManager()->getStorage('sync_cache')->loadMultiple($ids);
  foreach ($sync_caches as $sync_cache) {
    $sessions = $sync_cache->get('session')->referencedEntities();
    $sync_cache_external_id = $sync_cache->field_external_id->value;
    if (!empty($sessions)) {
      $session = reset($sessions);
      $session_external_id = $session->field_external_id->value;
      // Update session field_external_id value.
      if (strpos($session_external_id, ':') === FALSE) {
        $session->set('field_external_id', "$sync_cache_external_id:$session_external_id");
        $session->save();
      }
    }
    // Reset field_raw_data_hash value.
    $sync_cache->set('field_raw_data_hash', '');
    $sync_cache->save();
    $sandbox['progress']++;
    $sandbox['current'] = $sync_cache->id();
  }

  $_activenet_sync_disable_entity_hooks = FALSE;

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  return t('Session were updated for @count session nodes', ['@count' => $sandbox['max']]);
}

/**
 * Prevent unpublished nodes from being used in entity references.
 */
function ygs_master_update_8149() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [

      'views.view.entity_reference_views',
      'field.field.field_collection_item.field_updates_queue_home.field_updates_queue_update',
      'field.field.field_collection_item.field_updates_queue_item_collect.field_updates_queue_update',
      'field.field.node.blog_post.field_blog_posts_related',
    ]
  );
}

/**
 * Increase updates queue home items count.
 */
function ygs_master_update_8150() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.storage.paragraph.field_updates_queue_home',
    ]
  );
}

/**
 * Revert 8150 Update.
 */
function ygs_master_update_8151() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.storage.paragraph.field_updates_queue_home',
    ]
  );
}

/**
 * Adds conditional field settings to Alert nodes.
 */
function ygs_master_update_8152() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.storage.node.field_placement',
      'field.storage.node.field_alert_type_switcher',
      'field.field.node.alert.field_alert_type_switcher',
      'field.field.node.alert.field_placement',
      'core.entity_view_display.node.alert.default',
    ]
  );
}

/**
 * Add color field to the banner paragraph type.
 */
function ygs_master_update_8153() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      "field.field.paragraph.banner.field_color",
      "core.entity_form_display.paragraph.banner.default",
      "core.entity_view_display.paragraph.banner.default",
    ]
  );
}

/**
 * Add field_sales_date to session CT.
 */
function ygs_master_update_8154() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.session.default',
      'core.entity_view_display.node.session.default',
      'field.field.node.session.field_sales_date',
      'field.storage.node.field_sales_date',
    ]
  );
}

/**
 * Make field_headline and field_start_end_time not required.
 */
function ygs_master_update_8155() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.field_collection_item.field_collection_activity_group.field_headline',
      'field.field.field_collection_item.field_collection_activity_group.field_collection_activity_hours',
      'field.field.field_collection_item.field_collection_activity_hours.field_day_of_the_week',
      'field.field.field_collection_item.field_collection_activity_hours.field_start_end_time',
    ]
  );
}

/**
 * Enable simplesamlphp_auth module.
 */
function ygs_master_update_8156() {
  \Drupal::service('module_installer')->install(['externalauth', 'simplesamlphp_auth'], TRUE);
}

/**
 * Add content_gallery view mode for gallery paragraph.
 */
function ygs_master_update_8157() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_view_display.paragraph.gallery.content_gallery',
      'core.entity_view_mode.paragraph.content_gallery',
    ]
  );
}

/**
 * Reconfigure SSO, grant access to toolbar for authenticated users.
 */
function ygs_master_update_8158() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'simplesamlphp_auth.settings',
      'user.role.authenticated',
    ]
  );
}

/**
 * Permissions fix for page access.
 */
function ygs_master_update_8159() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'user.role.authenticated',
    ]
  );
}

/**
 * Permissions fix for authenticated user.
 */
function ygs_master_update_8160() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'user.role.authenticated',
    ]
  );
}

/**
 * Backs up content moderation data, and uninstalls module.
 */
function ygs_master_update_8161() {
  $cms_query = "CREATE TABLE content_moderation_state_backup AS (SELECT * FROM content_moderation_state); ";
  $cms_field_data_query = "CREATE TABLE content_moderation_state_field_data_backup AS (SELECT * FROM content_moderation_state_field_data); ";
  $cms_field_data_revision_query = "CREATE TABLE content_moderation_state_field_revision_backup AS (SELECT * FROM content_moderation_state_field_revision); ";
  $cms_revision_query = "CREATE TABLE content_moderation_state_revision_backup AS (SELECT * FROM content_moderation_state_revision); ";
  Database::getConnection('default')->query($cms_query, array(), array());
  Database::getConnection('default')->query($cms_field_data_query, array(), array());
  Database::getConnection('default')->query($cms_field_data_revision_query, array(), array());
  Database::getConnection('default')->query($cms_revision_query, array(), array());

  Database::getConnection('default')->query("TRUNCATE TABLE content_moderation_state; ", array(), array());

  \Drupal::service('module_installer')->uninstall(array('content_moderation'));
}

/**
 * Enables workbench moderation module.
 */
function ygs_master_update_8162() {
  \Drupal::service('module_installer')->install(array('workbench_moderation'));
}

/**
 * Resolves bug where node forms were not showing fields.
 */
function ygs_master_update_8163() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.paragraph.featured_blog_posts.default',
    ]
  );
}

/**
 * Provides configuration for workbench moderation module.
 */
function ygs_master_update_8164() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.node.session.default',
      'workbench_moderation.moderation_state.archived',
      'workbench_moderation.moderation_state.draft',
      'workbench_moderation.moderation_state.needs_review',
      'workbench_moderation.moderation_state.published',
      'workbench_moderation.moderation_state_transition.archived_published',
      'workbench_moderation.moderation_state_transition.draft_draft',
      'workbench_moderation.moderation_state_transition.draft_needs_review',
      'workbench_moderation.moderation_state_transition.draft_published',
      'workbench_moderation.moderation_state_transition.needs_review_draft',
      'workbench_moderation.moderation_state_transition.needs_review_needs_review',
      'workbench_moderation.moderation_state_transition.needs_review_published',
      'workbench_moderation.moderation_state_transition.published_archived',
      'workbench_moderation.moderation_state_transition.published_draft',
      'workbench_moderation.moderation_state_transition.published_published',
      'node.type.activity',
      'node.type.alert',
      'node.type.announcement',
      'node.type.blog_post',
      'node.type.branch',
      'node.type.camp',
      'node.type.class',
      'node.type.facility',
      'node.type.landing_page',
      'node.type.membership',
      'node.type.program',
      'node.type.program_subcategory',
      'node.type.session',
    ]
  );
}

/**
 * Import backed up data to workbench moderation.
 */
function ygs_master_update_8165() {
  $schema = Database::getConnection()->schema();
  $schema->createTable('workbench_revision_tracker', array(
    'fields' => array(
      'entity_type' => array(
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => '255',
        'default' => '',
      ),
      'entity_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'length' => '11',
        'default' => '0',
      ),
      'langcode' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => '12',
      ),
      'revision_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'length' => '11',
        'default' => '0',
      ),
    ),
    'primary key' => array(
      'revision_id',
    ),
    'mysql_character_set' => 'utf8',
  ));

  $lock_table = "ALTER TABLE workbench_revision_tracker MODIFY entity_type VARCHAR(255) NOT NULL;";
  $add_entity_type = "UPDATE workbench_revision_tracker SET entity_type='node' WHERE entity_type='';";
  $copy_data = "
    INSERT INTO workbench_revision_tracker (entity_id, langcode, revision_id)
    SELECT id, langcode, revision_id
    FROM content_moderation_state_backup;";

  Database::getConnection('default')->query($copy_data, array(), array());
  Database::getConnection('default')->query($add_entity_type, array(), array());
  Database::getConnection('default')->query($lock_table, array(), array());

  // Migrate moderation_state to node_field_data table.
  $update_moderation_state = '
    UPDATE node_field_data
    INNER JOIN content_moderation_state_field_data_backup ON (node_field_data.nid = content_moderation_state_field_data_backup.content_entity_id)
    SET node_field_data.moderation_state = content_moderation_state_field_data_backup.moderation_state;
  ';
  Database::getConnection('default')->query($update_moderation_state, [], []);
  // Migrate moderation_state to node_field_revision table.
  $update_revision_moderation_state = '
    UPDATE node_field_revision
    INNER JOIN content_moderation_state_field_revision_backup ON (node_field_revision.vid = content_moderation_state_field_revision_backup.content_entity_revision_id)
    SET node_field_revision.moderation_state = content_moderation_state_field_revision_backup.moderation_state;
  ';
  Database::getConnection('default')->query($update_revision_moderation_state, [], []);
  // Delete backup tables.
  $schema->dropTable('content_moderation_state_field_data_backup');
  $schema->dropTable('content_moderation_state_backup');
  $schema->dropTable('content_moderation_state_field_revision_backup');
  $schema->dropTable('content_moderation_state_revision_backup');
}

/**
 * Provides configuration for workbench moderation module.
 */
function ygs_master_update_8166() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.node.activity.scheduled_update',
      'field.field.node.alert.scheduled_update',
      'field.field.node.announcement.scheduled_update',
      'field.field.node.blog_post.scheduled_update',
      'field.field.node.branch.scheduled_update',
      'field.field.node.camp.scheduled_update',
      'field.field.node.class.scheduled_update',
      'field.field.node.facility.scheduled_update',
      'field.field.node.landing_page.scheduled_update',
      'field.field.node.membership.scheduled_update',
      'field.field.node.program.scheduled_update',
      'field.field.node.program_subcategory.scheduled_update',
      'field.field.scheduled_update.publishing.field_moderation_state_1',
      'field.field.scheduled_update.unpublishing.field_moderation_state',
      'field.storage.node.scheduled_update',
      'field.storage.scheduled_update.field_moderation_state',
      'field.storage.scheduled_update.field_moderation_state_1',
      'scheduled_updates.scheduled_update_type.unpublishing',
      'core.entity_form_display.node.activity.default',
      'core.entity_form_display.node.alert.default',
      'core.entity_form_display.node.announcement.default',
      'core.entity_form_display.node.blog_post.default',
      'core.entity_form_display.node.branch.default',
      'core.entity_form_display.node.camp.default',
      'core.entity_form_display.node.class.default',
      'core.entity_form_display.node.facility.default',
      'core.entity_form_display.node.landing_page.default',
      'core.entity_form_display.node.membership.default',
      'core.entity_form_display.node.program.default',
      'core.entity_form_display.node.program_subcategory.default',
      'core.entity_view_display.node.alert.body_alert',
      'core.entity_view_display.node.alert.default',
      'core.entity_view_display.node.alert.footer_alert',
      'core.entity_view_display.node.alert.header_alert',
      'core.entity_view_display.node.alert.teaser',
      'scheduled_updates.scheduled_update_type.publishing',
      'workbench_moderation.moderation_state.draft',
    ]
  );
  // Enable ygs_moderation_wrapper module.
  \Drupal::service('module_installer')->install(['ygs_moderation_wrapper']);
}

/**
 * Scheduled updates config fixes.
 */
function ygs_master_update_8167() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'user.role.contributor',
      'user.role.editor',
      'field.field.scheduled_update.unpublishing.field_moderation_state',
      'scheduled_updates.scheduled_update_type.unpublishing',
      'scheduled_updates.scheduled_update_type.publishing',
      'workbench_moderation.moderation_state.draft',
      'scheduled_updates.settings',
      'user.role.editor',
      'workbench_moderation.moderation_state_transition.archived_published',
      'workbench_moderation.moderation_state_transition.draft_draft',
      'workbench_moderation.moderation_state_transition.draft_needs_review',
      'workbench_moderation.moderation_state_transition.draft_published',
      'workbench_moderation.moderation_state_transition.needs_review_draft',
      'workbench_moderation.moderation_state_transition.needs_review_needs_review',
      'workbench_moderation.moderation_state_transition.needs_review_published',
      'workbench_moderation.moderation_state_transition.published_archived',
      'workbench_moderation.moderation_state_transition.published_draft',
      'workbench_moderation.moderation_state_transition.published_published',
      'workbench_moderation.moderation_state_transition.draft_archived',
      'workbench_moderation.moderation_state_transition.needs_review_archived',
    ]
  );
}

/**
 * Location enhancements.
 */
function ygs_master_update_8168() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.storage.node.field_facility_area',
      'core.entity_form_display.taxonomy_term.facility_type.default',
      'core.entity_view_display.taxonomy_term.facility_type.default',
      'field.field.taxonomy_term.facility_type.field_location_filter',
      'field.storage.taxonomy_term.field_location_filter',
    ]
  );
}

/**
 * Location enhancements - new paragraph.
 */
function ygs_master_update_8169() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'core.entity_form_display.paragraph.facility_sessions_search_block.default',
      'core.entity_view_display.paragraph.facility_sessions_search_block.default',
      'field.field.paragraph.facility_sessions_search_block.field_button_url',
      'field.field.paragraph.facility_sessions_search_block.field_custom_block_reference',
      'field.storage.paragraph.field_button_url',
      'paragraphs.paragraphs_type.facility_sessions_search_block',
    ]
  );

  // Enable ygs_facility module.
  \Drupal::service('module_installer')->install(['ygs_facility']);
}

/**
 * Add sort to sync_cache_dashboard views.
 */
function ygs_master_update_8170() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      YGS_CONFDIR . 'views.view.sync_cache_dashboard',
    ]
  );
}

/**
 * Adds Facility field to SessionInstance entity.
 */
function ygs_master_update_8171() {
  $storage_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Facility'))
    ->setDescription(t('Facility which the Session Instance is related to.'))
    ->setRevisionable(TRUE)
    ->setSetting('target_type', 'node')
    ->setSetting('handler_settings', [
      'target_bundles' => [
        'facility' => 'facility',
      ],
    ])
    ->setTranslatable(FALSE)
    ->setDisplayOptions('view', [
      'label' => 'visible',
      'type' => 'node',
      'weight' => 0,
    ])
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
      'weight' => 5,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'placeholder' => '',
      ],
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('facility', 'session_instance', 'session_instance', $storage_definition);
}

/**
 * Enable OpenY rose theme.
 */
function ygs_master_update_8173() {
  \Drupal::service('theme_installer')->install(['openy_rose']);
}

/**
 * Enable OpenY locations modules.
 */
function ygs_master_update_8174() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $configs_to_delete = [
    'field.storage.node.field_content',
    'field.storage.node.field_header_content',
    'field.storage.node.field_sidebar_content',
    'metatag.metatag_defaults.node',
    // Branch configs.
    'core.entity_form_display.node.branch.default',
    'core.entity_view_display.node.branch.default',
    'core.entity_view_display.node.branch.teaser',
    'node.type.branch',
    'pathauto.pattern.branch_alias_pattern',
    'field.field.node.branch.field_content',
    'field.field.node.branch.field_header_content',
    'taxonomy.vocabulary.area',
    // Camp configs.
    'core.entity_form_display.node.camp.default',
    'core.entity_view_display.node.camp.default',
    'core.entity_view_display.node.camp.teaser',
    'node.type.camp',
    'pathauto.pattern.camp_alias_pattern',
    'field.field.node.camp.field_content',
    'field.field.node.camp.field_header_content',
    // Facility configs.
    'core.entity_form_display.node.facility.default',
    'core.entity_view_display.node.facility.default',
    'core.entity_view_display.node.facility.full',
    'core.entity_view_display.node.facility.teaser',
    'node.type.facility',
    'taxonomy.vocabulary.facility_type',
    'pathauto.pattern.facility_alias_pattern',
    'field.field.node.facility.field_content',
    'field.field.node.facility.field_sidebar_content',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }
  // Enable openy_loc_branch dependencies.
  \Drupal::service('module_installer')->install([
    'jquery_colorpicker',
    'tour',
    'libraries',
    'datalayer',
    'simple_sitemap',
    'openy_node',
    'geolocation',
    'openy_location',
    'openy_hours_formatter',
    'openy_field_custom_hours',
    'openy_loc_branch',
    'openy_loc_camp',
    'openy_loc_facility',
  ]);
  $loc_fields = [
    // Copy data from field_address to field_location_address.
    [
      'from' => [
        'field' => 'field_address',
        'columns' => [
          'field_address_langcode',
          'field_address_country_code',
          'field_address_administrative_area',
          'field_address_locality',
          'field_address_dependent_locality',
          'field_address_postal_code',
          'field_address_sorting_code',
          'field_address_address_line1',
          'field_address_address_line2',
          'field_address_organization',
          'field_address_given_name',
          'field_address_additional_name',
          'field_address_family_name',
        ],
      ],
      'to' => [
        'field' => 'field_location_address',
        'columns' => [
          'field_location_address_langcode',
          'field_location_address_country_code',
          'field_location_address_administrative_area',
          'field_location_address_locality',
          'field_location_address_dependent_locality',
          'field_location_address_postal_code',
          'field_location_address_sorting_code',
          'field_location_address_address_line1',
          'field_location_address_address_line2',
          'field_location_address_organization',
          'field_location_address_given_name',
          'field_location_address_additional_name',
          'field_location_address_family_name',
        ],
      ],
    ],
    // Copy data from field_directions to field_location_directions.
    [
      'from' => [
        'field' => 'field_directions',
        'columns' => [
          'field_directions_uri',
          'field_directions_title',
          'field_directions_options',
        ],
      ],
      'to' => [
        'field' => 'field_location_directions',
        'columns' => [
          'field_location_directions_uri',
          'field_location_directions_title',
          'field_location_directions_options',
        ],
      ],
    ],
    // Copy data from field_email to field_location_email.
    [
      'from' => [
        'field' => 'field_email',
        'columns' => ['field_email_value'],
      ],
      'to' => [
        'field' => 'field_location_email',
        'columns' => ['field_location_email_value'],
      ],
    ],
    // Copy data from field_fax to field_location_fax.
    [
      'from' => [
        'field' => 'field_fax',
        'columns' => ['field_fax_value'],
      ],
      'to' => [
        'field' => 'field_location_fax',
        'columns' => ['field_location_fax_value'],
      ],
    ],
    // Copy data from field_phone to field_location_phone.
    [
      'from' => [
        'field' => 'field_phone',
        'columns' => ['field_phone_value'],
      ],
      'to' => [
        'field' => 'field_location_phone',
        'columns' => ['field_location_phone_value'],
      ],
    ],
  ];
  $branch_fields = [
    // Copy data from field_state to field_location_state.
    [
      'from' => [
        'field' => 'field_state',
        'columns' => ['field_state_value'],
      ],
      'to' => [
        'field' => 'field_location_state',
        'columns' => ['field_location_state_value'],
      ],
    ],
    // Copy data from field_branch_area to field_location_area.
    [
      'from' => [
        'field' => 'field_branch_area',
        'columns' => ['field_branch_area_target_id'],
      ],
      'to' => [
        'field' => 'field_location_area',
        'columns' => ['field_location_area_target_id'],
      ],
    ],
    // Copy data from field_temporary_url to field_location_temp_url.
    [
      'from' => [
        'field' => 'field_temporary_url',
        'columns' => [
          'field_temporary_url_uri',
          'field_temporary_url_title',
          'field_temporary_url_options',
        ],
      ],
      'to' => [
        'field' => 'field_location_temp_url',
        'columns' => [
          'field_location_temp_url_uri',
          'field_location_temp_url_title',
          'field_location_temp_url_options',
        ],
      ],
    ],
  ];
  $camp_fields = [
    // Copy data from field_menu_links to field_camp_menu_links.
    [
      'from' => [
        'field' => 'field_menu_links',
        'columns' => [
          'field_menu_links_uri',
          'field_menu_links_title',
          'field_menu_links_options',
        ],
      ],
      'to' => [
        'field' => 'field_camp_menu_links',
        'columns' => [
          'field_camp_menu_links_uri',
          'field_camp_menu_links_title',
          'field_camp_menu_links_options',
        ],
      ],
    ],
  ];
  $facility_fields = [
    // Copy data from field_branch_area to field_location_area.
    [
      'from' => [
        'field' => 'field_branch_area',
        'columns' => ['field_branch_area_target_id'],
      ],
      'to' => [
        'field' => 'field_location_area',
        'columns' => ['field_location_area_target_id'],
      ],
    ],
    // Copy data from field_location to field_facility_loc.
    [
      'from' => [
        'field' => 'field_location',
        'columns' => ['field_location_target_id'],
      ],
      'to' => [
        'field' => 'field_facility_loc',
        'columns' => ['field_facility_loc_target_id'],
      ],
    ],
    // Copy data from field_facility_area to field_facility_type.
    [
      'from' => [
        'field' => 'field_facility_area',
        'columns' => ['field_facility_area_target_id'],
      ],
      'to' => [
        'field' => 'field_facility_type',
        'columns' => ['field_facility_type_target_id'],
      ],
    ],
  ];
  // Migrate branch fields.
  ygs_master_paragraph_field_migrate('branch', $loc_fields, TRUE, 'node');
  ygs_master_paragraph_field_migrate('branch', $branch_fields, TRUE, 'node');
  // Migrate camp fields.
  ygs_master_paragraph_field_migrate('camp', $loc_fields, TRUE, 'node');
  ygs_master_paragraph_field_migrate('camp', $camp_fields, TRUE, 'node');
  // Migrate facility fields.
  ygs_master_paragraph_field_migrate('facility', $loc_fields, TRUE, 'node');
  ygs_master_paragraph_field_migrate('facility', $facility_fields, TRUE, 'node');

  // Return branch/camp fields not related to openy back to edit form.
  // Update only part of configs because config uuid was changed.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = [
    'dependencies.config',
    'dependencies.module',
    'third_party_settings',
    'content',
    'hidden',
  ];
  $configs_to_update = [
    // Branch configs.
    'core.entity_form_display.node.branch.default',
    'core.entity_view_display.node.branch.default',
    'core.entity_view_display.node.branch.header_branch',
    'core.entity_view_display.node.branch.full',
    'core.entity_view_display.node.branch.teaser',
    // Camp configs.
    'core.entity_form_display.node.camp.default',
    'core.entity_view_display.node.camp.default',
    'core.entity_view_display.node.camp.header_camp',
    'core.entity_view_display.node.camp.teaser',
    // Facility configs.
    'core.entity_form_display.node.facility.default',
    'core.entity_view_display.node.facility.default',
    'core.entity_view_display.node.facility.full',
    'core.entity_view_display.node.facility.sidebar',
    'core.entity_view_display.node.facility.teaser',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
  $config_importer->update(YGS_CONFDIR . 'node.type.branch.yml', 'node.type.branch', 'dependencies.module');
  $config_importer->update(YGS_CONFDIR . 'node.type.branch.yml', 'node.type.branch', 'third_party_settings');
  $config_importer->update(YGS_CONFDIR . 'node.type.camp.yml', 'node.type.camp', 'dependencies.module');
  $config_importer->update(YGS_CONFDIR . 'node.type.camp.yml', 'node.type.camp', 'third_party_settings');
  $config_importer->update(YGS_CONFDIR . 'node.type.facility.yml', 'node.type.facility', 'dependencies.module');
  $config_importer->update(YGS_CONFDIR . 'node.type.facility.yml', 'node.type.facility', 'third_party_settings');
  // Restore location fields configs.
  $field_parts = [
    'dependencies.config',
    'dependencies.module',
    'settings',
    'content',
    'hidden',
  ];
  $field_configs_to_update = [
    'field.field.node.branch.field_header_content',
    'field.field.node.camp.field_header_content',
    'field.field.node.facility.field_content',
    'field.field.node.facility.field_sidebar_content',
  ];
  foreach ($field_configs_to_update as $config) {
    foreach ($field_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
  // Restore media view modes configs.
  $media_update_parts = [
    'content',
    'hidden',
  ];
  $media_configs_to_update = [
    'core.entity_view_display.media.image.banner',
    'core.entity_view_display.media.image.blog_page',
    'core.entity_view_display.media.image.blog_teaser',
    'core.entity_view_display.media.image.images_gallery',
    'core.entity_view_display.media.image.link',
    'core.entity_view_display.media.image.program_header',
    'core.entity_view_display.media.image.subprogram_teaser',
    'core.entity_view_display.media.image.thumb_262_233',
    'core.entity_view_display.media.document.default',
    'core.entity_view_display.media.document.link',
    'core.entity_view_display.media.document.media_library',
    'core.entity_view_display.media.video.default',
    'core.entity_view_display.media.video.embedded_full',
    'core.entity_view_display.media.video.link',
    'core.entity_view_display.media.video.media_library',
  ];
  foreach ($media_configs_to_update as $config) {
    foreach ($media_update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
}

/**
 * Location finder and filters.
 */
function ygs_master_update_8175() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $config_factory->getEditable('views.view.locations')->delete();
  // Enable modules.
  \Drupal::service('module_installer')->install([
    'openy_socrates',
    'openy_map',
    'location_finder',
    'openy_data_wrapper',
    'openy_prgf_loc_finder',
    'ygs_locations_data_wrapper',
  ]);
  // Add google_map_api_key to configs.
  $importer = \Drupal::service('config_import.param_updater');
  $importer->update(YGS_CONFDIR . 'geolocation.settings.yml', 'geolocation.settings', 'google_map_api_key');

  // Restore Dynamic block location views.
  $old_values = [
    'branches' => 'views_block:locations-ygs_locations_branches_block',
    'camps' => 'views_block:locations-ygs_locations_camps_block',
    'facilities' => 'views_block:locations-ygs_locations_facilities_block',
  ];
  $new_values = [
    'branches' => 'views_block:locations-locations_branches_block',
    'camps' => 'views_block:locations-locations_camps_block',
    'facilities' => 'views_block:locations-locations_facilities_block',
  ];
  $tables = [
    'paragraph__field_custom_block_reference',
    'paragraph_revision__field_custom_block_reference',
  ];
  foreach ($tables as $table) {
    foreach ($old_values as $key => $value) {
      $query = "UPDATE {$table}
      SET `field_custom_block_reference_value` = '" . $new_values[$key] . "'
      WHERE `field_custom_block_reference_value` = '$value';
    ";
      Database::getConnection('default')->query($query, [], []);
    }
  }

  // Load location landing page node and replace old paragraphs.
  $path = \Drupal::service('path.alias_manager')->getPathByAlias('/locations');
  if (preg_match('/node\/(\d+)/', $path, $matches)) {
    $node = Node::load($matches[1]);
    // Delete old paragraphs.
    if ($node->field_header_content) {
      foreach ($node->field_header_content->referencedEntities() as $paragraph) {
        $paragraph->delete();
      }
    }
    if ($node->field_content) {
      foreach ($node->field_content->referencedEntities() as $paragraph) {
        $paragraph->delete();
      }
    }
    // Add new paragraphs.
    if ($node->hasField('field_header_content')) {
      $header_content_paragraph = Paragraph::create([
        'type' => 'prgf_location_finder_filters',
        'parent_id' => $node->id(),
        'parent_type' => 'node',
        'parent_field_name' => 'field_header_content',
        'status' => 1,
        'field_prgf_lf_tags_style' => 'list_checkboxes',
      ]);
      $node->set('field_header_content', [$header_content_paragraph]);
    }

    $content_paragraph = Paragraph::create([
      'type' => 'prgf_location_finder',
      'parent_id' => $node->id(),
      'parent_type' => 'node',
      'parent_field_name' => 'field_content',
      'status' => 1,
    ]);
    $node->set('field_content', [$content_paragraph]);
    $node->save();
  }

  // Uninstall ygs_locations module.
  \Drupal::service('module_installer')->uninstall(['ygs_locations']);

  // Add location filter paragraph to field_header_content.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['dependencies.config', 'settings'];
  foreach ($update_parts as $part) {
    $config_importer->update(YGS_CONFDIR . 'field.field.node.landing_page.field_header_content.yml', 'field.field.node.landing_page.field_header_content', $part);
  }

}

/**
 * Enable openy_node_landing module.
 */
function ygs_master_update_8176() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $configs_to_delete = [
    'core.entity_form_display.node.landing_page.default',
    'core.entity_view_display.node.landing_page.default',
    'core.entity_view_display.node.landing_page.full',
    'core.entity_view_display.node.landing_page.teaser',
    'field.field.node.landing_page.field_content',
    'field.field.node.landing_page.field_sidebar_content',
    'field.field.node.landing_page.field_header_content',
    'node.type.landing_page',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }

  // Enable module.
  \Drupal::service('module_installer')->install([
    'openy_node_landing',
  ]);

  $fields = [
    // Copy data from field_layout to field_lp_layout.
    [
      'from' => [
        'field' => 'field_layout',
        'columns' => [
          'field_layout_value',
        ],
      ],
      'to' => [
        'field' => 'field_lp_layout',
        'columns' => [
          'field_lp_layout_value',
        ],
      ],
    ],
    // Copy data from field_metatags to field_meta_tags.
    [
      'from' => [
        'field' => 'field_metatags',
        'columns' => [
          'field_metatags_value',
        ],
      ],
      'to' => [
        'field' => 'field_meta_tags',
        'columns' => [
          'field_meta_tags_value',
        ],
      ],
    ],
  ];

  ygs_master_paragraph_field_migrate('landing_page', $fields, TRUE, 'node');

  // Return landing_page fields not related to openy back to edit form.
  // Update only part of configs because config uuid was changed.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = [
    'dependencies.config',
    'dependencies.module',
    'third_party_settings',
    'content',
    'hidden',
  ];
  $configs_to_update = [
    // Landing configs.
    'core.entity_form_display.node.landing_page.default',
    'core.entity_view_display.node.landing_page.default',
    'core.entity_view_display.node.landing_page.full',
    'core.entity_view_display.node.landing_page.header_program',
    'core.entity_view_display.node.landing_page.sidebar',
    'core.entity_view_display.node.landing_page.teaser',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
  $config_importer->update(YGS_CONFDIR . 'node.type.landing_page.yml', 'node.type.landing_page', 'dependencies.module');
  $config_importer->update(YGS_CONFDIR . 'node.type.landing_page.yml', 'node.type.landing_page', 'third_party_settings');
  // Restore landing_page fields configs.
  $field_parts = [
    'dependencies.config',
    'dependencies.module',
    'settings',
    'content',
    'hidden',
  ];
  $field_configs_to_update = [
    'field.field.node.landing_page.field_header_content',
  ];
  foreach ($field_configs_to_update as $config) {
    foreach ($field_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
}

/**
 * Enable openy simple_content paragraph.
 */
function ygs_master_update_8177() {
  // Remove active configs.
  \Drupal::configFactory()->getEditable('core.entity_form_display.paragraph.simple_content.default')->delete();
  \Drupal::configFactory()->getEditable('core.entity_view_display.paragraph.simple_content.default')->delete();
  \Drupal::configFactory()->getEditable('paragraphs.paragraphs_type.simple_content')->delete();
  // Enable required modules.
  \Drupal::service('module_installer')->install([
    'plugin',
    'openy_prgf',
    'openy_prgf_simple_content',
  ]);
  // Copy data from old field.
  $copy_field_data = "
    INSERT INTO {paragraph__field_prgf_description} (bundle,deleted,entity_id,revision_id,langcode,delta,field_prgf_description_value,field_prgf_description_format)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,field_body_no_summary_value,field_body_no_summary_format
    FROM {paragraph__field_body_no_summary}
    WHERE bundle='simple_content'
  ";
  $copy_field_revision_data = "
    INSERT INTO {paragraph_revision__field_prgf_description} (bundle,deleted,entity_id,revision_id,langcode,delta,field_prgf_description_value,field_prgf_description_format)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,field_body_no_summary_value,field_body_no_summary_format
    FROM {paragraph_revision__field_body_no_summary}
    WHERE bundle='simple_content'
  ";
  Database::getConnection('default')->query($copy_field_data, [], []);
  Database::getConnection('default')->query($copy_field_revision_data, [], []);
  // Delete old field only for simple_content paragraph.
  $properties = array(
    'entity_type' => 'paragraph',
    'bundle' => 'simple_content',
    'include_deleted' => TRUE,
  );
  $fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties($properties);
  foreach ($fields as $field) {
    $entity_type = $field->getTargetEntityTypeId();
    if ($field->getName() == 'field_body_no_summary') {
      Drupal::entityTypeManager()->getStorage($entity_type)->purgeFieldData($field, 100);
      $field->delete();
      field_purge_field($field);
    }
  }
}

/**
 * Enable OpenY Story Card paragraph.
 */
function ygs_master_update_8178() {
  // Remove active configs.
  \Drupal::configFactory()->getEditable('core.entity_form_display.paragraph.story_card.default')->delete();
  \Drupal::configFactory()->getEditable('core.entity_view_display.paragraph.story_card.default')->delete();
  \Drupal::configFactory()->getEditable('paragraphs.paragraphs_type.story_card')->delete();
  // Enable openy_prgf_story_card module.
  \Drupal::service('module_installer')->install([
    'openy_prgf_story_card',
  ]);

  $fields = [
    // Copy data from field_card_title to field_prgf_title.
    [
      'from' => [
        'field' => 'field_card_title',
        'columns' => ['field_card_title_value'],
      ],
      'to' => [
        'field' => 'field_prgf_title',
        'columns' => ['field_prgf_title_value'],
      ],
    ],
    // Copy data from field_story_link to field_prgf_link.
    [
      'from' => [
        'field' => 'field_story_link',
        'columns' => [
          'field_story_link_uri',
          'field_story_link_title',
          'field_story_link_options',
        ],
      ],
      'to' => [
        'field' => 'field_prgf_link',
        'columns' => [
          'field_prgf_link_uri',
          'field_prgf_link_title',
          'field_prgf_link_options',
        ],
      ],
    ],
    // Copy data from field_card_headline to field_prgf_headline.
    [
      'from' => [
        'field' => 'field_card_headline',
        'columns' => ['field_card_headline_value'],
      ],
      'to' => [
        'field' => 'field_prgf_headline',
        'columns' => ['field_prgf_headline_value'],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('story_card', $fields);
}

/**
 * Enable OpenY Small Banner paragraph.
 */
function ygs_master_update_8179() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $configs_to_delete = [
    'core.entity_form_display.paragraph.small_banner.default',
    'core.entity_view_display.paragraph.small_banner.default',
    'paragraphs.paragraphs_type.small_banner',
    'core.entity_view_mode.media.embedded_full',
    'field.storage.media.field_media_in_library',
    'taxonomy.vocabulary.media_tags',
    'core.entity_form_display.media.image.default',
    'core.entity_view_display.media.image.default',
    'core.entity_view_display.media.image.embedded_full',
    'core.entity_view_display.media.image.icon',
    'core.entity_view_mode.media.icon',
    'entity_browser.browser.images_library',
    'field.field.media.image.field_media_caption',
    'field.field.media.image.field_media_in_library',
    'field.storage.media.field_media_caption',
    'media_entity.bundle.image',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }
  // Enable modules for Small Banner paragraph.
  \Drupal::service('module_installer')->install([
    'jquery_colorpicker',
    'openy_media',
    'openy_media_image',
    'openy_txnm_color',
    'openy_prgf_small_banner',
  ]);
  // Add colors terms.
  $terms_to_be_created = [
    ['name' => 'Purple', 'field_color' => '5c2e91'],
    ['name' => 'Green', 'field_color' => '01A490'],
    ['name' => 'Grey', 'field_color' => '636466'],
    ['name' => 'Dark Green', 'field_color' => '006b6b'],
    ['name' => 'Dark Blue', 'field_color' => '0060af'],
    ['name' => 'Fuchsia', 'field_color' => 'c6168d'],
    ['name' => 'White', 'field_color' => 'ffffff'],
    ['name' => 'Turquoise', 'field_color' => '20bdbe'],
  ];
  $terms_created = [];
  foreach ($terms_to_be_created as $key => $data) {
    $term = Term::create([
      'vid' => 'color',
      'name' => $data['name'],
      'field_color' => $data['field_color'],
    ]);
    $term->save();
    $terms_created[$data['name']] = $term->id();
  }
  $fields = [
    // Copy data from field_banner_headline to field_prgf_headline.
    [
      'from' => [
        'field' => 'field_banner_headline',
        'columns' => ['field_banner_headline_value'],
      ],
      'to' => [
        'field' => 'field_prgf_headline',
        'columns' => ['field_prgf_headline_value'],
      ],
    ],
    // Copy data from field_media_image to field_prgf_image.
    [
      'from' => [
        'field' => 'field_media_image',
        'columns' => ['field_media_image_target_id'],
      ],
      'to' => [
        'field' => 'field_prgf_image',
        'columns' => ['field_prgf_image_target_id'],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('small_banner', $fields);
  // Migrate color field.
  $copy_field_data = "
    INSERT INTO {paragraph__field_prgf_color} (bundle,deleted,entity_id,revision_id,langcode,delta,field_prgf_color_target_id)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,
    CASE field_color_value
      WHEN 'purple' THEN " . $terms_created['Purple'] . "
      WHEN 'green' THEN " . $terms_created['Green'] . "
      WHEN 'dark-green' THEN " . $terms_created['Dark Green'] . "
      WHEN 'dark-blue' THEN " . $terms_created['Dark Blue'] . "
      WHEN 'grey' THEN " . $terms_created['Grey'] . "
      ELSE " . $terms_created['Grey'] . "
      END as 'color'
    FROM {paragraph__field_color}
    WHERE bundle='small_banner'
  ";
  $copy_field_revision_data = "
    INSERT INTO {paragraph_revision__field_prgf_color} (bundle,deleted,entity_id,revision_id,langcode,delta,field_prgf_color_target_id)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,
    CASE field_color_value
      WHEN 'purple' THEN " . $terms_created['Purple'] . "
      WHEN 'green' THEN " . $terms_created['Green'] . "
      WHEN 'dark-green' THEN " . $terms_created['Dark Green'] . "
      WHEN 'dark-blue' THEN " . $terms_created['Dark Blue'] . "
      WHEN 'grey' THEN " . $terms_created['Grey'] . "
      ELSE " . $terms_created['Grey'] . "
      END as 'color'
    FROM {paragraph_revision__field_color}
    WHERE bundle='small_banner'
  ";
  Database::getConnection('default')->query($copy_field_data, [], []);
  Database::getConnection('default')->query($copy_field_revision_data, [], []);
  // Delete old field only for simple_content paragraph.
  $properties = array(
    'entity_type' => 'paragraph',
    'bundle' => 'small_banner',
    'include_deleted' => TRUE,
  );
  $fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties($properties);
  foreach ($fields as $field) {
    $entity_type = $field->getTargetEntityTypeId();
    if ($field->getName() == 'field_color') {
      Drupal::entityTypeManager()->getStorage($entity_type)->purgeFieldData($field, 100);
      $field->delete();
      field_purge_field($field);
    }
  }
}

/**
 * Enable OpenY Promo Card paragraph.
 */
function ygs_master_update_8180() {
  // Remove active configs.
  \Drupal::configFactory()->getEditable('core.entity_form_display.paragraph.promo_card.default')->delete();
  \Drupal::configFactory()->getEditable('core.entity_view_display.paragraph.promo_card.default')->delete();
  \Drupal::configFactory()->getEditable('paragraphs.paragraphs_type.promo_card')->delete();
  // Enable openy_prgf_promo_card module.
  \Drupal::service('module_installer')->install([
    'openy_prgf_promo_card',
  ]);
  // Migrate data from old fields.
  $fields = [
    // Copy data from field_card_title to field_prgf_title.
    [
      'from' => [
        'field' => 'field_card_title',
        'columns' => ['field_card_title_value'],
      ],
      'to' => [
        'field' => 'field_prgf_title',
        'columns' => ['field_prgf_title_value'],
      ],
    ],
    // Copy data from field_promo_link to field_prgf_link.
    [
      'from' => [
        'field' => 'field_promo_link',
        'columns' => [
          'field_promo_link_uri',
          'field_promo_link_title',
          'field_promo_link_options',
        ],
      ],
      'to' => [
        'field' => 'field_prgf_link',
        'columns' => [
          'field_prgf_link_uri',
          'field_prgf_link_title',
          'field_prgf_link_options',
        ],
      ],
    ],
    // Copy data from field_card_headline to field_prgf_headline.
    [
      'from' => [
        'field' => 'field_card_headline',
        'columns' => ['field_card_headline_value'],
      ],
      'to' => [
        'field' => 'field_prgf_headline',
        'columns' => ['field_prgf_headline_value'],
      ],
    ],
    // Copy data from field_body_no_summary to field_prgf_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_prgf_description',
        'columns' => [
          'field_prgf_description_value',
          'field_prgf_description_format',
        ],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('promo_card', $fields);
}

/**
 * Enable Teaser paragraph.
 */
function ygs_master_update_8181() {
  // Enable openy_prgf_teaser module.
  \Drupal::service('module_installer')->install([
    'openy_prgf_teaser',
  ]);
}

/**
 * Enable openy_prgf_grid_content paragraph.
 */
function ygs_master_update_8182() {
  // Enable openy_prgf_grid_content module.
  \Drupal::service('module_installer')->install([
    'openy_prgf_grid_content',
  ]);
}

/**
 * Enable OpenY paragraph gallery.
 */
function ygs_master_update_8183() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $configs_to_delete = [
    'core.entity_form_display.paragraph.gallery.default',
    'core.entity_view_display.paragraph.gallery.default',
    'paragraphs.paragraphs_type.gallery',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }
  // Enable openy_prgf_gallery module.
  \Drupal::service('module_installer')->install([
    'openy_prgf_gallery',
  ]);
  $fields = [
    // Copy data from field_body_no_summary to field_prgf_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_prgf_description',
        'columns' => [
          'field_prgf_description_value',
          'field_prgf_description_format',
        ],
      ],
    ],
    // Copy data from field_gallery_link to field_prgf_link.
    [
      'from' => [
        'field' => 'field_gallery_link',
        'columns' => [
          'field_gallery_link_uri',
          'field_gallery_link_title',
          'field_gallery_link_options',
        ],
      ],
      'to' => [
        'field' => 'field_prgf_link',
        'columns' => [
          'field_prgf_link_uri',
          'field_prgf_link_title',
          'field_prgf_link_options',
        ],
      ],
    ],
    // Copy data from field_gallery_headline to field_prgf_headline.
    [
      'from' => [
        'field' => 'field_gallery_headline',
        'columns' => ['field_gallery_headline_value'],
      ],
      'to' => [
        'field' => 'field_prgf_headline',
        'columns' => ['field_prgf_headline_value'],
      ],
    ],
    // Copy data from field_images to field_prgf_images.
    [
      'from' => [
        'field' => 'field_images',
        'columns' => ['field_images_target_id'],
      ],
      'to' => [
        'field' => 'field_prgf_images',
        'columns' => ['field_prgf_images_target_id'],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('gallery', $fields);
}

/**
 * Migrate media image fields.
 */
function ygs_master_update_8184() {
  $fields = [
    // Copy data from field_image to field_media_image.
    [
      'from' => [
        'field' => 'field_image',
        'columns' => [
          'field_image_target_id',
          'field_image_alt',
          'field_image_title',
          'field_image_width',
          'field_image_height',
        ],
      ],
      'to' => [
        'field' => 'field_media_image',
        'columns' => [
          'field_media_image_target_id',
          'field_media_image_alt',
          'field_media_image_title',
          'field_media_image_width',
          'field_media_image_height',
        ],
      ],
    ],
    // Copy data from field_media_tag to field_media_tags.
    [
      'from' => [
        'field' => 'field_media_tag',
        'columns' => [
          'field_media_tag_target_id',
        ],
      ],
      'to' => [
        'field' => 'field_media_tags',
        'columns' => [
          'field_media_tags_target_id',
        ],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('image', $fields, TRUE, 'media');
}

/**
 * Enable OpenY paragraph featured content.
 */
function ygs_master_update_8185() {
  // Remove active configs.
  \Drupal::configFactory()->getEditable('core.entity_form_display.paragraph.featured_content.default')->delete();
  \Drupal::configFactory()->getEditable('core.entity_view_display.paragraph.featured_content.default')->delete();
  \Drupal::configFactory()->getEditable('paragraphs.paragraphs_type.featured_content')->delete();
  // Enable openy_prgf_featured_content module.
  \Drupal::service('module_installer')->install([
    'openy_prgf_featured_content',
  ]);
  // Migrate data from old fields.
  $fields = [
    // Copy data from field_cta_link to field_prgf_link.
    [
      'from' => [
        'field' => 'field_cta_link',
        'columns' => [
          'field_cta_link_uri',
          'field_cta_link_title',
          'field_cta_link_options',
        ],
      ],
      'to' => [
        'field' => 'field_prgf_link',
        'columns' => [
          'field_prgf_link_uri',
          'field_prgf_link_title',
          'field_prgf_link_options',
        ],
      ],
    ],
    // Copy data from field_headline to field_prgf_headline.
    [
      'from' => [
        'field' => 'field_headline',
        'columns' => ['field_headline_value'],
      ],
      'to' => [
        'field' => 'field_prgf_headline',
        'columns' => ['field_prgf_headline_value'],
      ],
    ],
    // Copy data from field_body_no_summary to field_prgf_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_prgf_description',
        'columns' => [
          'field_prgf_description_value',
          'field_prgf_description_format',
        ],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('featured_content', $fields);
  // Copy data from field_collection_item__field_grid_content to
  // paragraph__field_prgf_fc_clm_description.
  // Get field_paragraph_field_style tables names.
  $field_style_tables = \Drupal::keyValue('entity.storage_schema.sql')->get('field_collection_item.field_schema_data.field_paragraph_field_style');
  $field_style = key(array_slice($field_style_tables, 0, 1, TRUE));
  $field_style_r = key(array_slice($field_style_tables, -1, 1, TRUE));
  // Get field_grid_content tables names.
  $field_grid_content_tables = \Drupal::keyValue('entity.storage_schema.sql')->get('field_collection_item.field_schema_data.field_grid_content');
  $field_grid_content = key(array_slice($field_grid_content_tables, 0, 1, TRUE));
  $field_grid_content_r = key(array_slice($field_grid_content_tables, -1, 1, TRUE));
  // Get field_prgf_fc_clm_description tables names.
  $field_prgf_fc_clm_tables = \Drupal::keyValue('entity.storage_schema.sql')->get('paragraph.field_schema_data.field_prgf_fc_clm_description');
  $field_prgf_fc_clm = key(array_slice($field_prgf_fc_clm_tables, 0, 1, TRUE));
  $field_prgf_fc_clm_r = key(array_slice($field_prgf_fc_clm_tables, -1, 1, TRUE));

  $copy_field_data = "
    INSERT INTO {$field_prgf_fc_clm} (bundle,deleted,entity_id,revision_id,langcode,delta,field_prgf_fc_clm_description_value,field_prgf_fc_clm_description_format)
    SELECT p.bundle, fc.deleted, p.entity_id, p.revision_id, p.langcode, fc.delta, fc.field_grid_content_value, fc.field_grid_content_format
    FROM {paragraph__field_featured_grid_content} p
    JOIN {$field_grid_content} fc
    ON p.field_featured_grid_content_target_id = fc.entity_id
    WHERE p.bundle = 'featured_content';
  ";
  $copy_revision_field_data = "
    INSERT INTO {$field_prgf_fc_clm_r} (bundle,deleted,entity_id,revision_id,langcode,delta,field_prgf_fc_clm_description_value,field_prgf_fc_clm_description_format)
    SELECT p.bundle, fc.deleted, p.entity_id, p.revision_id, p.langcode, fc.delta, fc.field_grid_content_value, fc.field_grid_content_format
    FROM {paragraph_revision__field_featured_grid_content} p
    JOIN {$field_grid_content_r} fc
    ON p.field_featured_grid_content_revision_id = fc.revision_id
    WHERE p.bundle = 'featured_content';
  ";
  Database::getConnection('default')->query($copy_field_data, [], []);
  Database::getConnection('default')->query($copy_revision_field_data, [], []);
  // Copy data from field_prgf_grid_style_value to field_prgf_grid_style.
  $copy_field_data = "
    INSERT INTO {paragraph__field_prgf_grid_style} (bundle,deleted,entity_id,revision_id,langcode,delta,field_prgf_grid_style_value)
    SELECT p.bundle, fc.deleted, p.entity_id, p.revision_id, p.langcode, fc.delta, CAST(fc.field_paragraph_field_style_value AS UNSIGNED)
    FROM {paragraph__field_featured_grid_content} p
    JOIN {$field_style} fc
    ON p.field_featured_grid_content_target_id = fc.entity_id
    WHERE p.bundle = 'featured_content';
  ";
  $copy_revision_field_data = "
    INSERT INTO {paragraph_revision__field_prgf_grid_style} (bundle,deleted,entity_id,revision_id,langcode,delta,field_prgf_grid_style_value)
    SELECT p.bundle, fc.deleted, p.entity_id, p.revision_id, p.langcode, fc.delta, CAST(fc.field_paragraph_field_style_value AS UNSIGNED)
    FROM {paragraph_revision__field_featured_grid_content} p
    JOIN {$field_style_r} fc
    ON p.field_featured_grid_content_revision_id = fc.revision_id
    WHERE p.bundle = 'featured_content';
  ";
  Database::getConnection('default')->query($copy_field_data, [], []);
  Database::getConnection('default')->query($copy_revision_field_data, [], []);

  // Delete field_featured_grid_content field collection.
  $properties = array(
    'entity_type' => 'paragraph',
    'bundle' => 'featured_content',
    'include_deleted' => TRUE,
  );
  $fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties($properties);
  foreach ($fields as $field) {
    $entity_type = $field->getTargetEntityTypeId();
    if (in_array($field->getName(), ['field_featured_grid_content'])) {
      Drupal::entityTypeManager()->getStorage($entity_type)->purgeFieldData($field, 100);
      $field->delete();
      field_purge_field($field);
    }
  }
}

/**
 * Enable OpenY Media Video module.
 */
function ygs_master_update_8186() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();

  $configs_to_delete = [
    'core.entity_form_display.media.video.default',
    'core.entity_view_display.media.video.default',
    'core.entity_view_display.media.video.embedded_full',
    'field.field.media.video.field_media_in_library',
    'media_entity.bundle.video',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }

  // Enable module.
  \Drupal::service('module_installer')->install([
    'openy_media_video',
  ]);

  $fields = [
    // Copy data from field_video to field_media_video_embed_field.
    [
      'from' => [
        'field' => 'field_video',
        'columns' => [
          'field_video_value',
        ],
      ],
      'to' => [
        'field' => 'field_media_video_embed_field',
        'columns' => [
          'field_media_video_embed_field_value',
        ],
      ],
    ],
    // Copy data from field_media_tag to field_media_tags.
    [
      'from' => [
        'field' => 'field_media_tag',
        'columns' => [
          'field_media_tag_target_id',
        ],
      ],
      'to' => [
        'field' => 'field_media_tags',
        'columns' => [
          'field_media_tags_target_id',
        ],
      ],
    ],
    // Copy data from field_id to field_media_video_id.
    [
      'from' => [
        'field' => 'field_id',
        'columns' => [
          'field_id_value',
        ],
      ],
      'to' => [
        'field' => 'field_media_video_id',
        'columns' => [
          'field_media_video_id_value',
        ],
      ],
    ],
    // Copy data from field_source to field_media_source.
    [
      'from' => [
        'field' => 'field_source',
        'columns' => [
          'field_source_value',
        ],
      ],
      'to' => [
        'field' => 'field_media_source',
        'columns' => [
          'field_media_source_value',
        ],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('video', $fields, TRUE, 'media');

}

/**
 * Enable OpenY Media document module.
 */
function ygs_master_update_8187() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();

  $configs_to_delete = [
    'core.entity_form_display.media.document.default',
    'core.entity_view_display.media.document.default',
    'field.field.media.document.field_media_in_library',
    'media_entity.bundle.document',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }

  // Enable module.
  \Drupal::service('module_installer')->install([
    'openy_media_document',
  ]);

  // Set media_entity.bundle.document new_revision back to false.
  \Drupal::configFactory()->getEditable('media_entity.bundle.document')->set('new_revision', FALSE)->save();

  $fields = [
    // Copy data from field_document to field_media_document.
    [
      'from' => [
        'field' => 'field_document',
        'columns' => [
          'field_document_target_id',
          'field_document_display',
          'field_document_description',
        ],
      ],
      'to' => [
        'field' => 'field_media_document',
        'columns' => [
          'field_media_document_target_id',
          'field_media_document_display',
          'field_media_document_description',
        ],
      ],
    ],
    // Copy data from field_media_tag to field_media_tags.
    [
      'from' => [
        'field' => 'field_media_tag',
        'columns' => [
          'field_media_tag_target_id',
        ],
      ],
      'to' => [
        'field' => 'field_media_tags',
        'columns' => [
          'field_media_tags_target_id',
        ],
      ],
    ],
    // Copy data from field_mime_type to field_media_mime.
    [
      'from' => [
        'field' => 'field_mime_type',
        'columns' => [
          'field_mime_type_value',
        ],
      ],
      'to' => [
        'field' => 'field_media_mime',
        'columns' => [
          'field_media_mime_value',
        ],
      ],
    ],
    // Copy data from field_document_size to field_media_size.
    [
      'from' => [
        'field' => 'field_document_size',
        'columns' => [
          'field_document_size_value',
        ],
      ],
      'to' => [
        'field' => 'field_media_size',
        'columns' => [
          'field_media_size_value',
        ],
      ],
    ],
  ];

  ygs_master_paragraph_field_migrate('document', $fields, TRUE, 'media');
}

/**
 * Enable openy_node_mbrshp module.
 */
function ygs_master_update_8188() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();

  $configs_to_delete = [
    'core.entity_form_display.node.membership.default',
    'core.entity_view_display.node.membership.default',
    'core.entity_view_display.node.membership.teaser',
    'node.type.membership',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }

  // Enable module.
  \Drupal::service('module_installer')->install([
    'openy_node_mbrshp',
  ]);

  $fields = [
    // Copy data from field_body_no_summary to field_mbrshp_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_mbrshp_description',
        'columns' => [
          'field_mbrshp_description_value',
          'field_mbrshp_description_format',
        ],
      ],
    ],
    // Copy data from field_image to field_mbrshp_image.
    [
      'from' => [
        'field' => 'field_image',
        'columns' => [
          'field_image_target_id',
        ],
      ],
      'to' => [
        'field' => 'field_mbrshp_image',
        'columns' => [
          'field_mbrshp_image_target_id',
        ],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('membership', $fields, TRUE, 'node');

  // Return membership fields not related to openy back to edit form.
  // Update only part of configs because config uuid was changed.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = [
    'dependencies.config',
    'dependencies.module',
    'third_party_settings',
    'content',
    'hidden',
  ];
  $configs_to_update = [
    'core.entity_form_display.node.membership.default',
    'core.entity_view_display.node.membership.default',
    'core.entity_view_display.node.membership.registration',
    'core.entity_view_display.node.membership.full',
    'core.entity_view_display.node.membership.teaser',
    'core.entity_form_display.paragraph.membership_info.default',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
  $config_importer->update(YGS_CONFDIR . 'node.type.membership.yml', 'node.type.membership', 'dependencies.module');
  $config_importer->update(YGS_CONFDIR . 'node.type.membership.yml', 'node.type.membership', 'third_party_settings');
}

/**
 * Enable openy_node_blog module.
 */
function ygs_master_update_8189() {
  // Backup field_blog_color new field_blog_color is entity reference.
  $query1 = "CREATE TABLE {node__field_blog_color2} AS (SELECT * FROM {node__field_blog_color}); ";
  $query2 = "CREATE TABLE {node_revision__field_blog_color2} AS (SELECT * FROM {node_revision__field_blog_color}); ";
  Database::getConnection('default')->query($query1, [], []);
  Database::getConnection('default')->query($query2, [], []);
  // Delete old field_blog_color for safe replace by new field.
  $bundles = ['blog_post', 'announcement'];
  foreach ($bundles as $bundle) {
    $properties = array(
      'entity_type' => 'node',
      'bundle' => $bundle,
      'include_deleted' => TRUE,
    );
    $fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties($properties);
    foreach ($fields as $field) {
      $entity_type = $field->getTargetEntityTypeId();
      if (in_array($field->getName(), ['field_blog_color'])) {
        Drupal::entityTypeManager()->getStorage($entity_type)->purgeFieldData($field, 100);
        $field->delete();
        field_purge_field($field);
      }
    }
  }
  // Drop field_blog_color tables.
  $query1 = "DROP TABLE IF EXISTS {node__field_blog_color}; ";
  $query2 = "DROP TABLE IF EXISTS {node_revision__field_blog_color}; ";
  Database::getConnection('default')->query($query1, [], []);
  Database::getConnection('default')->query($query2, [], []);
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $configs_to_delete = [
    'taxonomy.vocabulary.blog_category',
    'core.entity_form_display.taxonomy_term.blog_category.default',
    'core.entity_view_display.taxonomy_term.blog_category.default',
    'field.storage.node.field_blog_category',
    'field.storage.node.field_blog_color',
    'field.storage.node.field_blog_image',
    'pathauto.pattern.blog_post_alias_pattern',
    'field.field.node.announcement.field_blog_color',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }

  // Enable modules.
  \Drupal::service('module_installer')->install([
    'openy_txnm_blog_category',
    'openy_node_blog',
  ]);

  // Change existing blog posts data to new node type.
  $query1 = "UPDATE {node} SET `type` = 'blog' WHERE `type` = 'blog_post'";
  $query2 = "UPDATE {node_field_data} SET `type` = 'blog' WHERE `type` = 'blog_post'";
  Database::getConnection('default')->query($query1, [], []);
  Database::getConnection('default')->query($query2, [], []);

  // Change existing blog posts field data to new node type.
  $existing_blog_fields = [
    'field_blog_category',
    'field_sidebar_content',
    'field_content',
    'field_blog_image',
    'field_metatags',
    'field_add_to_branch_queue',
    'field_homepage_queue',
    'field_body_no_summary',
    'field_location',
    'field_locations',
    'field_blog_posts_related',
    'field_blog_color2',
  ];
  foreach ($existing_blog_fields as $field) {
    $query1 = "UPDATE {node__$field} SET `bundle` = 'blog' WHERE `bundle` = 'blog_post'";
    $query2 = "UPDATE {node_revision__$field} SET `bundle` = 'blog' WHERE `bundle` = 'blog_post'";
    Database::getConnection('default')->query($query1, [], []);
    Database::getConnection('default')->query($query2, [], []);
  }

  $fields = [
    // Copy data from field_body_no_summary to field_blog_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_blog_description',
        'columns' => [
          'field_blog_description_value',
          'field_blog_description_format',
        ],
      ],
    ],
    // Copy data from field_locations to field_blog_location.
    [
      'from' => [
        'field' => 'field_locations',
        'columns' => ['field_locations_target_id'],
      ],
      'to' => [
        'field' => 'field_blog_location',
        'columns' => ['field_blog_location_target_id'],
      ],
    ],
    // Copy data from field_blog_posts_related to field_blog_related.
    [
      'from' => [
        'field' => 'field_blog_posts_related',
        'columns' => ['field_blog_posts_related_target_id'],
      ],
      'to' => [
        'field' => 'field_blog_related',
        'columns' => ['field_blog_related_target_id'],
      ],
    ],
    // Copy data from field_blog_color to field_blog_style.
    [
      'from' => [
        'field' => 'field_blog_color2',
        'columns' => ['field_blog_color_value'],
      ],
      'to' => [
        'field' => 'field_blog_style',
        'columns' => ['field_blog_style_value'],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('blog', $fields, FALSE, 'node');

  $fields = [
    // Copy data from field_blog_color to field_blog_style for announcement.
    [
      'from' => [
        'field' => 'field_blog_color2',
        'columns' => ['field_blog_color_value'],
      ],
      'to' => [
        'field' => 'field_blog_style',
        'columns' => ['field_blog_style_value'],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('announcement', $fields, FALSE, 'node');

  // Delete field_blog_color backup tables.
  Database::getConnection('default')->query("DROP TABLE {node__field_blog_color2};", [], []);
  Database::getConnection('default')->query("DROP TABLE {node_revision__field_blog_color2};", [], []);
  // Add old checkboxes to new blog CT.
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'field.field.node.blog.field_add_to_branch_queue',
      'field.field.node.blog.field_homepage_queue',
      'field.field.node.blog.scheduled_update',
      // Fix other configs, related to blog posts.
      'page_manager.page_variant.node_view-panels_variant-5',
      'search_api.index.content',
      'user.role.contributor',
      'user.role.editor',
      'views.view.blog',
      'views.view.entity_reference_views',
      'views.view.membership',
      'views.view.sub_category_classes',
      'core.entity_view_display.node.blog.sidebar',
      // Fix announcement CT.
      'core.entity_form_display.node.announcement.default',
      'core.entity_view_display.node.announcement.default',
      'core.entity_view_display.node.announcement.teaser',
      'field.field.node.announcement.field_blog_color',
      'field.field.node.announcement.field_blog_style',
      'field.field.node.announcement.field_blog_text_color',
    ]
  );

  // Return membership fields not related to openy back to edit form.
  // Update only part of configs because config uuid was changed.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = [
    'dependencies.config',
    'dependencies.module',
    'third_party_settings',
    'content',
    'hidden',
  ];
  $configs_to_update = [
    'core.entity_form_display.node.blog.default',
    'core.entity_view_display.node.blog.default',
    'core.entity_view_display.node.blog.full',
    'core.entity_view_display.node.blog.teaser',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
  $config_importer->update(YGS_CONFDIR . 'node.type.blog.yml', 'node.type.blog', 'dependencies.module');
  $config_importer->update(YGS_CONFDIR . 'node.type.blog.yml', 'node.type.blog', 'third_party_settings');
  $config_importer->update(YGS_CONFDIR . 'field.field.node.blog.field_blog_location.yml', 'field.field.node.blog.field_blog_location', 'description');
  $config_importer->update(YGS_CONFDIR . 'field.field.paragraph.featured_blog_posts.field_blog_posts.yml', 'field.field.paragraph.featured_blog_posts.field_blog_posts', 'settings');
  $config_importer->update(YGS_CONFDIR . 'field.field.paragraph.featured_blog_posts.field_blog_posts.yml', 'field.field.paragraph.featured_blog_posts.field_blog_posts', 'dependencies');
}

/**
 * WYSIWYG openy embed modes.
 */
function ygs_master_update_8190() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'editor.editor.full_html',
    ]
  );
}

/**
 * Enable OpenY Featured Blog Posts paragraph.
 */
function ygs_master_update_8191() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $configs_to_delete = [
    'core.entity_form_display.paragraph.featured_blogs.default',
    'core.entity_view_display.paragraph.featured_blogs.default',
    'paragraphs.paragraphs_type.featured_blogs',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }
  // Enable openy_prgf_gallery module.
  \Drupal::service('module_installer')->install([
    'openy_prgf_featured_blogs',
  ]);
  $fields = [
    // Copy data from field_blog_headline to field_prgf_headline.
    [
      'from' => [
        'field' => 'field_blog_headline',
        'columns' => ['field_blog_headline_value'],
      ],
      'to' => [
        'field' => 'field_prgf_headline',
        'columns' => ['field_prgf_headline_value'],
      ],
    ],
    // Copy data from field_blog_posts to field_fblog_posts.
    [
      'from' => [
        'field' => 'field_blog_posts',
        'columns' => ['field_blog_posts_target_id'],
      ],
      'to' => [
        'field' => 'field_fblog_posts',
        'columns' => ['field_fblog_posts_target_id'],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('featured_blog_posts', $fields);
}

/**
 * Change existing featured_blog_posts data to new paragraph type.
 */
function ygs_master_update_8192() {
  $query1 = "UPDATE {paragraphs_item} SET `type` = 'featured_blogs' WHERE `type` = 'featured_blog_posts'";
  $query2 = "UPDATE {paragraphs_item_field_data} SET `type` = 'featured_blogs' WHERE `type` = 'featured_blog_posts'";
  Database::getConnection('default')->query($query1, [], []);
  Database::getConnection('default')->query($query2, [], []);

  // Change existing featured_blog_posts field data to new paragraph type.
  $existing_blog_fields = [
    'field_prgf_headline',
    'field_fblog_posts',
  ];
  foreach ($existing_blog_fields as $field) {
    $query1 = "UPDATE {paragraph__$field} SET `bundle` = 'featured_blogs' WHERE `bundle` = 'featured_blog_posts'";
    $query2 = "UPDATE {paragraph_revision__$field} SET `bundle` = 'featured_blogs' WHERE `bundle` = 'featured_blog_posts'";
    Database::getConnection('default')->query($query1, [], []);
    Database::getConnection('default')->query($query2, [], []);
  }

  // Fix landing pages header.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = [
    'dependencies.config',
    'settings.handler_settings.target_bundles',
    'settings.handler_settings.target_bundles_drag_drop',
  ];
  $configs_to_update = [
    'field.field.node.branch.field_bottom_content',
    'field.field.node.branch.field_content',
    'field.field.node.branch.field_header_content',
    'field.field.node.camp.field_bottom_content',
    'field.field.node.camp.field_content',
    'field.field.node.camp.field_header_content',
    'field.field.node.class.field_content',
    'field.field.node.class.field_sidebar_content',
    'field.field.node.facility.field_content',
    'field.field.node.facility.field_sidebar_content',
    'field.field.node.program.field_content',
    'field.field.node.program.field_sidebar_content',
    'field.field.node.program_subcategory.field_content',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
  // Delete old paragraph type.
  $paragraph_type = \Drupal::entityTypeManager()->getStorage('paragraphs_type')->load('featured_blog_posts');
  $paragraph_type->delete();
}

/**
 * Enable paragraphs Latest Blog Posts.
 */
function ygs_master_update_8193() {
  // Enable modules.
  \Drupal::service('module_installer')->install([
    'openy_prgf_blog_branch',
    'openy_prgf_blog_camp',
    'openy_prgf_blog_latest',
    'openy_prgf_blog_listing',
  ]);
}

/**
 * Restore Latest Blog Posts nodes fields configuration.
 */
function ygs_master_update_8194() {
  // Add new paragraphs to content fields.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['dependencies', 'third_party_settings', 'settings'];
  $configs_to_update = [
    'field.field.node.branch.field_bottom_content',
    'field.field.node.branch.field_content',
    'field.field.node.camp.field_bottom_content',
    'field.field.node.camp.field_content',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
}

/**
 * Enable OpenY Banner.
 */
function ygs_master_update_8195() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();

  $configs_to_delete = [
    'core.entity_form_display.paragraph.banner.default',
    'core.entity_view_display.paragraph.banner.default',
    'paragraphs.paragraphs_type.banner',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }

  // Enable module.
  \Drupal::service('module_installer')->install([
    'openy_prgf_banner',
  ]);

  $fields = [
    // Copy data from field_body_no_summary to field_prgf_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_prgf_description',
        'columns' => [
          'field_prgf_description_value',
          'field_prgf_description_format',
        ],
      ],
    ],
    // Copy data from field_banner_headline to field_prgf_headline.
    [
      'from' => [
        'field' => 'field_banner_headline',
        'columns' => ['field_banner_headline_value'],
      ],
      'to' => [
        'field' => 'field_prgf_headline',
        'columns' => ['field_prgf_headline_value'],
      ],
    ],
    // Copy data from field_media_image to field_prgf_image.
    [
      'from' => [
        'field' => 'field_media_image',
        'columns' => ['field_media_image_target_id'],
      ],
      'to' => [
        'field' => 'field_prgf_image',
        'columns' => ['field_prgf_image_target_id'],
      ],
    ],
    // Copy data from field_gallery_link to field_prgf_link.
    [
      'from' => [
        'field' => 'field_gallery_link',
        'columns' => [
          'field_gallery_link_uri',
          'field_gallery_link_title',
          'field_gallery_link_options',
        ],
      ],
      'to' => [
        'field' => 'field_prgf_link',
        'columns' => [
          'field_prgf_link_uri',
          'field_prgf_link_title',
          'field_prgf_link_options',
        ],
      ],
    ],
  ];

  ygs_master_paragraph_field_migrate('banner', $fields);

  // Migrate color field.
  $manager = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $purple = key($manager->loadByProperties(['name' => 'Purple']));
  $green = key($manager->loadByProperties(['name' => 'Green']));
  $dGreen = key($manager->loadByProperties(['name' => 'Dark Green']));
  $dBlue = key($manager->loadByProperties(['name' => 'Dark Blue']));
  $grey = key($manager->loadByProperties(['name' => 'Grey']));
  $copy_field_data = "
    INSERT INTO {paragraph__field_prgf_color} (bundle,deleted,entity_id,revision_id,langcode,delta,field_prgf_color_target_id)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,
    CASE field_color_value
      WHEN 'purple' THEN " . $purple . "
      WHEN 'green' THEN " . $green . "
      WHEN 'dark-green' THEN " . $dGreen . "
      WHEN 'dark-blue' THEN " . $dBlue . "
      WHEN 'grey' THEN " . $grey . "
      ELSE " . $grey . "
      END as 'color'
    FROM {paragraph__field_color}
    WHERE bundle='banner'
  ";
  $copy_field_revision_data = "
    INSERT INTO {paragraph_revision__field_prgf_color} (bundle,deleted,entity_id,revision_id,langcode,delta,field_prgf_color_target_id)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,
    CASE field_color_value
      WHEN 'purple' THEN " . $purple . "
      WHEN 'green' THEN " . $green . "
      WHEN 'dark-green' THEN " . $dGreen . "
      WHEN 'dark-blue' THEN " . $dBlue . "
      WHEN 'grey' THEN " . $grey . "
      ELSE " . $grey . "
      END as 'color'
    FROM {paragraph_revision__field_color}
    WHERE bundle='banner'
  ";

  Database::getConnection('default')->query($copy_field_data, [], []);
  Database::getConnection('default')->query($copy_field_revision_data, [], []);
  // Delete old field only for banner paragraph.
  $properties = array(
    'entity_type' => 'paragraph',
    'bundle' => 'banner',
    'include_deleted' => TRUE,
  );
  $fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties($properties);
  foreach ($fields as $field) {
    $entity_type = $field->getTargetEntityTypeId();
    if ($field->getName() == 'field_color') {
      Drupal::entityTypeManager()->getStorage($entity_type)->purgeFieldData($field, 100);
      $field->delete();
      field_purge_field($field);
    }
  }
}

/**
 * Enable openy_node_program module.
 */
function ygs_master_update_8196() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $configs_to_delete = [
    'core.entity_form_display.node.program.default',
    'core.entity_view_display.node.program.default',
    'core.entity_view_display.node.program.teaser',
    'field.field.node.program.field_content',
    'field.field.node.program.field_sidebar_content',
    'pathauto.pattern.program_alias_pattern',
    'node.type.program',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }
  // Enable module.
  \Drupal::service('module_installer')->install(['openy_node_program']);
}

/**
 * Migrate program fields data.
 */
function ygs_master_update_8197() {
  // Migrate fields data.
  $fields = [
    // Copy data from field_body_no_summary to field_program_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_program_description',
        'columns' => [
          'field_program_description_value',
          'field_program_description_format',
        ],
      ],
    ],
    // Copy data from field_icon_program to field_program_icon.
    [
      'from' => [
        'field' => 'field_icon_program',
        'columns' => ['field_icon_program_target_id'],
      ],
      'to' => [
        'field' => 'field_program_icon',
        'columns' => ['field_program_icon_target_id'],
      ],
    ],
    // Copy data from field_image_program to field_program_image.
    [
      'from' => [
        'field' => 'field_image_program',
        'columns' => ['field_image_program_target_id'],
      ],
      'to' => [
        'field' => 'field_program_image',
        'columns' => ['field_program_image_target_id'],
      ],
    ],
    // Copy data from field_metatags to field_meta_tags.
    [
      'from' => [
        'field' => 'field_metatags',
        'columns' => ['field_metatags_value'],
      ],
      'to' => [
        'field' => 'field_meta_tags',
        'columns' => ['field_meta_tags_value'],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('program', $fields, TRUE, 'node');
  // Restore program configs.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['dependencies', 'third_party_settings', 'content'];
  $configs_to_update = [
    'core.entity_form_display.node.program.default',
    'core.entity_view_display.node.program.default',
    'core.entity_view_display.node.program.header_program',
    'core.entity_view_display.node.program.sidebar',
    'core.entity_view_display.node.program.teaser',
    'node.type.program',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
  // Fix node_program_header image style.
  $config_importer->update(YGS_CONFDIR . 'image.style.node_program_header.yml', 'image.style.node_program_header', 'effects');
}

/**
 * Enable openy_node_category module.
 */
function ygs_master_update_8198() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $configs_to_delete = [
    'core.entity_form_display.node.program_subcategory.default',
    'core.entity_view_display.node.program_subcategory.default',
    'core.entity_view_display.node.program_subcategory.teaser',
    'field.field.node.program_subcategory.field_content',
    'field.field.node.program_subcategory.field_sidebar_content',
    'pathauto.pattern.subprogram_alias_pattern',
    'node.type.program_subcategory',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }
  // Enable module.
  \Drupal::service('module_installer')->install(['openy_node_category']);
}

/**
 * Migrate category fields data.
 */
function ygs_master_update_8199() {
  $fields = [
    // Copy data from field_program to field_category_program.
    [
      'from' => [
        'field' => 'field_program',
        'columns' => ['field_program_target_id'],
      ],
      'to' => [
        'field' => 'field_category_program',
        'columns' => ['field_category_program_target_id'],
      ],
    ],
    // Copy data from field_body_no_summary to field_category_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_category_description',
        'columns' => [
          'field_category_description_value',
          'field_category_description_format',
        ],
      ],
    ],
    // Copy data from field_image_program to field_category_image.
    [
      'from' => [
        'field' => 'field_image_program',
        'columns' => ['field_image_program_target_id'],
      ],
      'to' => [
        'field' => 'field_category_image',
        'columns' => ['field_category_image_target_id'],
      ],
    ],
    // Copy data from field_metatags to field_meta_tags.
    [
      'from' => [
        'field' => 'field_metatags',
        'columns' => ['field_metatags_value'],
      ],
      'to' => [
        'field' => 'field_meta_tags',
        'columns' => ['field_meta_tags_value'],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('program_subcategory', $fields, TRUE, 'node');
  // Restore program configs.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['dependencies', 'third_party_settings', 'content'];
  $configs_to_update = [
    'core.entity_form_display.node.program_subcategory.default',
    'core.entity_view_display.node.program_subcategory.default',
    'core.entity_view_display.node.program_subcategory.header_program',
    'node.type.program_subcategory',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(['views.view.program_subcategories']);
}

/**
 * Enable Data Layer.
 */
function ygs_master_update_8200() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $configs_to_delete = [
    'datalayer.settings',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }
  // Enable module.
  \Drupal::service('module_installer')->install([
    'openy_datalayer',
  ]);
}

/**
 * Enable openy_node_activity module.
 */
function ygs_master_update_8201() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $configs_to_delete = [
    // Node Activity configs.
    'core.entity_form_display.node.activity.default',
    'core.entity_view_display.node.activity.default',
    'core.entity_view_display.node.activity.teaser',
    'pathauto.pattern.activity_alias_pattern',
    'node.type.activity',
    // Node Class configs.
    'core.entity_form_display.node.class.default',
    'core.entity_view_display.node.class.default',
    'core.entity_view_display.node.class.teaser',
    'field.field.node.class.field_content',
    'field.field.node.class.field_sidebar_content',
    'pathauto.pattern.class_alias_pattern',
    'node.type.class',
    // Node Session configs.
    'core.entity_form_display.node.session.default',
    'core.entity_view_display.node.session.default',
    'core.entity_view_display.node.session.teaser',
    'node.type.session',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }
  // Enable module.
  \Drupal::service('module_installer')->install(['openy_node_activity']);
}

/**
 * Migrate activity fields data.
 */
function ygs_master_update_8202() {
  $fields = [
    // Copy data from field_program_subcategory to field_activity_category.
    [
      'from' => [
        'field' => 'field_program_subcategory',
        'columns' => ['field_program_subcategory_target_id'],
      ],
      'to' => [
        'field' => 'field_activity_category',
        'columns' => ['field_activity_category_target_id'],
      ],
    ],
    // Copy data from field_body_no_summary to field_activity_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_activity_description',
        'columns' => [
          'field_activity_description_value',
          'field_activity_description_format',
        ],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('activity', $fields, TRUE, 'node');

  // Restore program configs.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['dependencies', 'third_party_settings', 'content'];
  $configs_to_update = [
    'core.entity_form_display.node.activity.default',
    'node.type.activity',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
}

/**
 * Enable openy_node_class and openy_node_session modules.
 */
function ygs_master_update_8203() {
  // Enable module.
  \Drupal::service('module_installer')->install([
    'openy_node_class',
    'openy_node_session',
  ]);
}

/**
 * Migrate openy_node_class data.
 */
function ygs_master_update_8204() {
  $fields = [
    // Copy data from field_activity to field_class_activity.
    [
      'from' => [
        'field' => 'field_activity',
        'columns' => ['field_activity_target_id'],
      ],
      'to' => [
        'field' => 'field_class_activity',
        'columns' => ['field_class_activity_target_id'],
      ],
    ],
    // Copy data from field_body_no_summary to field_class_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_class_description',
        'columns' => [
          'field_class_description_value',
          'field_class_description_format',
        ],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('class', $fields, TRUE, 'node');
}

/**
 * Openy_node_class config restore.
 */
function ygs_master_update_8205() {
  // Restore class configs.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['dependencies', 'third_party_settings', 'content'];
  $configs_to_update = [
    'core.entity_form_display.node.class.default',
    'core.entity_view_display.node.class.default',
    'core.entity_view_display.node.class.sidebar',
    'core.entity_view_display.node.class.teaser',
    'core.entity_view_display.node.class.title',
    'node.type.class',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
  // Fix field_class_activity cardinality.
  $config_importer->update(YGS_CONFDIR . 'field.storage.node.field_class_activity.yml', 'field.storage.node.field_class_activity', 'cardinality');
  // Update openy class pathauto pattern.
  $config_importer->update(YGS_CONFDIR . 'pathauto.pattern.class.yml', 'pathauto.pattern.class', 'status');
  $config_importer->update(YGS_CONFDIR . 'pathauto.pattern.class.yml', 'pathauto.pattern.class', 'pattern');
  // Fix sub_category_classes views.
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(['views.view.sub_category_classes']);
}

/**
 * Use SIMPLE XML SITEMAP instead XML SITEMAP.
 */
function ygs_master_update_8206() {
  \Drupal::service('module_installer')->uninstall(['xmlsitemap']);
  \Drupal::service('simple_sitemap.generator')->generateSitemap();
}

/**
 * WYSIWYG openy embed modes.
 */
function ygs_master_update_8207() {
  // Restore embed icons.
  EmbedButtonIconHelper::setEmbedButtonIcon('openy_media_document', 'document.png', 'embed_document');
  EmbedButtonIconHelper::setEmbedButtonIcon('openy_media_image', 'image.png', 'embed_image');
  EmbedButtonIconHelper::setEmbedButtonIcon('openy_media_video', 'video.png', 'embed_video');
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'editor.editor.full_html',
    ]
  );
}

/**
 * Migrate openy_node_session data.
 */
function ygs_master_update_8208() {
  $fields = [
    // Copy data from field_class to field_session_class.
    [
      'from' => [
        'field' => 'field_class',
        'columns' => ['field_class_target_id'],
      ],
      'to' => [
        'field' => 'field_session_class',
        'columns' => ['field_session_class_target_id'],
      ],
    ],
    // Copy data from field_body_no_summary to field_session_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_session_description',
        'columns' => [
          'field_session_description_value',
          'field_session_description_format',
        ],
      ],
    ],
    // Copy data from field_member_price to field_session_mbr_price.
    [
      'from' => [
        'field' => 'field_member_price',
        'columns' => ['field_member_price_value'],
      ],
      'to' => [
        'field' => 'field_session_mbr_price',
        'columns' => ['field_session_mbr_price_value'],
      ],
    ],
    // Copy data from field_non_member_price to field_session_nmbr_price.
    [
      'from' => [
        'field' => 'field_non_member_price',
        'columns' => ['field_non_member_price_value'],
      ],
      'to' => [
        'field' => 'field_session_nmbr_price',
        'columns' => ['field_session_nmbr_price_value'],
      ],
    ],
    // Copy data from field_session_exclude_date to field_session_exclusions.
    [
      'from' => [
        'field' => 'field_session_exclude_date',
        'columns' => [
          'field_session_exclude_date_value',
          'field_session_exclude_date_end_value',
        ],
      ],
      'to' => [
        'field' => 'field_session_exclusions',
        'columns' => [
          'field_session_exclusions_value',
          'field_session_exclusions_end_value',
        ],
      ],
    ],
    // Copy data from field_gender to field_session_gender.
    [
      'from' => [
        'field' => 'field_gender',
        'columns' => ['field_gender_value'],
      ],
      'to' => [
        'field' => 'field_session_gender',
        'columns' => ['field_session_gender_value'],
      ],
    ],
    // Copy data from field_location to field_session_location.
    [
      'from' => [
        'field' => 'field_location',
        'columns' => ['field_location_target_id'],
      ],
      'to' => [
        'field' => 'field_session_location',
        'columns' => ['field_session_location_target_id'],
      ],
    ],
    // Copy data from field_max_age to field_session_max_age.
    [
      'from' => [
        'field' => 'field_max_age',
        'columns' => ['field_max_age_value'],
      ],
      'to' => [
        'field' => 'field_session_max_age',
        'columns' => ['field_session_max_age_value'],
      ],
    ],
    // Copy data from field_min_age to field_session_min_age.
    [
      'from' => [
        'field' => 'field_min_age',
        'columns' => ['field_min_age_value'],
      ],
      'to' => [
        'field' => 'field_session_min_age',
        'columns' => ['field_session_min_age_value'],
      ],
    ],
    // Copy data from field_online_registration to field_session_online.
    [
      'from' => [
        'field' => 'field_online_registration',
        'columns' => ['field_online_registration_value'],
      ],
      'to' => [
        'field' => 'field_session_online',
        'columns' => ['field_session_online_value'],
      ],
    ],
    // Copy data from field_physical_location to field_session_plocation.
    [
      'from' => [
        'field' => 'field_physical_location',
        'columns' => ['field_physical_location_target_id'],
      ],
      'to' => [
        'field' => 'field_session_plocation',
        'columns' => ['field_session_plocation_target_id'],
      ],
    ],
    // Copy data from field_link to field_session_reg_link.
    [
      'from' => [
        'field' => 'field_link',
        'columns' => [
          'field_link_uri',
          'field_link_title',
          'field_link_options',
        ],
      ],
      'to' => [
        'field' => 'field_session_reg_link',
        'columns' => [
          'field_session_reg_link_uri',
          'field_session_reg_link_title',
          'field_session_reg_link_options',
        ],
      ],
    ],
    // Copy data from field_ticket to field_session_ticket.
    [
      'from' => [
        'field' => 'field_ticket',
        'columns' => ['field_ticket_value'],
      ],
      'to' => [
        'field' => 'field_session_ticket',
        'columns' => ['field_session_ticket_value'],
      ],
    ],
  ];

  ygs_master_paragraph_field_migrate('session', $fields, TRUE, 'node');
}

/**
 * Openy_node_class config restore.
 */
function ygs_master_update_8209() {
  // Restore class configs.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['dependencies', 'third_party_settings', 'content'];
  $configs_to_update = [
    'core.entity_form_display.node.session.default',
    'core.entity_view_display.node.session.default',
    'core.entity_view_display.node.session.teaser',
    'core.entity_view_display.node.session.registration',
    'core.entity_view_display.node.session.schedule',
    'core.entity_view_display.node.session.session_teaser',
    'node.type.session',
    'core.entity_form_display.paragraph.session_time.default',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }
  // Add to session_time paragraph actual and frequency fields.
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs([
    'field.field.paragraph.session_time.field_session_time_actual',
    'field.field.paragraph.session_time.field_session_time_frequency',
    'field.storage.paragraph.field_session_time_actual',
    'field.storage.paragraph.field_session_time_frequency',
    // Restore sessions views.
    'views.view.sessions',
  ]);
}

/**
 * Enable openy_prgf_classes_listing module.
 */
function ygs_master_update_8210() {
  // Enable module.
  \Drupal::service('module_installer')->install([
    'views_block_filter_block',
    'openy_prgf_classes_listing',
  ]);

  // Add header content field to header_program display.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['dependencies', 'third_party_settings', 'content', 'hidden'];
  foreach ($update_parts as $part) {
    $config_importer->update(YGS_CONFDIR . 'core.entity_view_display.node.program_subcategory.header_program.yml', 'core.entity_view_display.node.program_subcategory.header_program', $part);
  }

  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs([
    // Remove sub_category_classes view from sub_category page variant.
    'page_manager.page_variant.node_view-panels_variant-1',
    // Restore sub_category_classes view.
    'views.view.sub_category_classes',
    // Add YGS paragraph type for sub_category_classes.
    'core.entity_form_display.paragraph.ygs_classes_listing.default',
    'core.entity_view_display.paragraph.ygs_classes_listing.default',
    'field.field.paragraph.ygs_classes_listing.field_prgf_block',
    'paragraphs.paragraphs_type.ygs_classes_listing',
  ]);
}

/**
 * Membership calculator.
 */
function ygs_master_update_8211() {
  // Uninstall ymca_mappings module.
  $storage_handler = \Drupal::entityTypeManager()->getStorage("mapping");
  $entities = $storage_handler->loadMultiple();
  $storage_handler->delete($entities);
  \Drupal::service('module_installer')->uninstall(['ymca_mappings']);
  // Enable module.
  \Drupal::service('module_installer')->install(['daxko', 'openy_prgf_mbrshp_calc']);

  // Load membership landing page node and replace old paragraphs.
  $path = \Drupal::service('path.alias_manager')->getPathByAlias('/membership');
  if (preg_match('/node\/(\d+)/', $path, $matches)) {
    $node = Node::load($matches[1]);
    // Add new paragraphs.
    $new_paragraphs[] = Paragraph::create([
      'type' => 'openy_prgf_mbrshp_calc',
      'parent_id' => $node->id(),
      'parent_type' => 'node',
      'parent_field_name' => 'field_content',
      'status' => 1,
    ]);

    // Delete old dynamic_content paragraph.
    if ($node->field_content) {
      foreach ($node->field_content->referencedEntities() as $paragraph) {
        if ($paragraph->bundle() == 'dynamic_content') {
          $paragraph->delete();
        }
        else {
          $new_paragraphs[] = $paragraph;
        }
      }
    }
    $node->set('field_content', $new_paragraphs);
    $node->save();
  }
}

/**
 * Enable openy_prgf_categories_listing module.
 */
function ygs_master_update_8212() {
  // Enable module.
  \Drupal::service('module_installer')->install([
    'openy_prgf_categories_listing',
  ]);

  // Remove sub_category_classes view from sub_category page variant.
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs([
    'page_manager.page_variant.node_view-panels_variant-0',
  ]);
}

/**
 * Enable openy_prgf_camp_menu module.
 */
function ygs_master_update_8213() {
  // Enable module.
  \Drupal::service('module_installer')->install([
    'openy_prgf_camp_menu',
  ]);
  // Remove camp menu block from camp and landing_page variant.
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs([
    'page_manager.page_variant.node_view-panels_variant-3',
    'page_manager.page_variant.node_view-panels_variant-8',
  ]);

  // Add openy_prgf_camp_menu to header area in camp and landing edit form.
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = [
    'content',
    'dependencies',
    'third_party_settings',
    'settings',
  ];
  $configs_to_update = [
    'core.entity_view_display.node.landing_page.default',
    'field.field.node.camp.field_header_content',
    'field.field.node.landing_page.field_header_content',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }

  // Delete field_location (camp) field from landing_page node.
  $properties = array(
    'entity_type' => 'node',
    'bundle' => 'landing_page',
    'include_deleted' => TRUE,
  );
  $fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties($properties);
  foreach ($fields as $field) {
    $entity_type = $field->getTargetEntityTypeId();
    if ($field->getName() == 'field_location') {
      Drupal::entityTypeManager()->getStorage($entity_type)->purgeFieldData($field, 50);
      $field->delete();
      field_purge_field($field);
    }
  }
}

/**
 * WYSIWYG text format updates.
 */
function ygs_master_update_8214() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'filter.format.full_html',
    ]
  );
  // Restore embed icons.
  $source = drupal_get_path('module', 'media_entity_document') . '/images/icons';
  $destination = \Drupal::config('media_entity.settings')->get('icon_base');
  media_entity_copy_icons($source, $destination);
  EmbedButtonIconHelper::setEmbedButtonIcon('openy_media_document', 'document.png', 'embed_document');
  EmbedButtonIconHelper::setEmbedButtonIcon('openy_media_image', 'image.png', 'embed_image');
  EmbedButtonIconHelper::setEmbedButtonIcon('openy_media_video', 'video.png', 'embed_video');
}

/**
 * Imported configs fixes.
 */
function ygs_master_update_8215() {
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['content', 'dependencies', 'hidden'];
  $configs_to_update = [
    // Add field_location_area to branch teaser.
    'core.entity_view_display.node.branch.teaser',
    // Remove country.name from address field.
    'core.entity_view_display.node.branch.header_branch',
    'core.entity_view_display.node.camp.header_camp',
  ];
  foreach ($configs_to_update as $config) {
    foreach ($update_parts as $part) {
      $config_importer->update(YGS_CONFDIR . $config . '.yml', $config, $part);
    }
  }

  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs([
    // Fix blog sidebar.
    'page_manager.page_variant.node_view-panels_variant-5',
  ]);
}

/**
 * User guide & tour around distribution.
 */
function ygs_master_update_8216() {
  $importer = \Drupal::service('config_import.importer');
  $openy_menu = drupal_get_path('module', 'openy_menu') . '/config/optional';
  $importer->setDirectory($openy_menu);
  $importer->importConfigs([
    'tour.tour.openy-menu-link',
    'tour.tour.openy-menu-management',
    'tour.tour.openy-menu-overview',
  ]);
  $openy_taxonomy = drupal_get_path('module', 'openy_taxonomy') . '/config/optional';
  $importer->setDirectory($openy_taxonomy);
  $importer->importConfigs([
    'tour.tour.openy-taxonomy-overview',
    'tour.tour.openy-taxonomy-term',
    'tour.tour.openy-taxonomy-vocabulary',
  ]);
}

/**
 * Customizable theme.
 */
function ygs_master_update_8217() {
  // Enable module.
  \Drupal::service('module_installer')->install(['color']);
  // Update theme configs.
  $config = \Drupal::service('config.factory')->getEditable('ymca_seattle.settings');
  $image_fields = [
    'footer_logo' => 'openy_rose_footer_logo',
    'camp_section_logo' => 'openy_rose_camp_section_logo',
    'camp_footer_logo' => 'openy_rose_camp_footer_logo',
    'camp_favicon' => 'openy_rose_camp_favicon',
  ];
  $config->set('oepny_rose_image_fields', $image_fields);
  $config->save();
}

/**
 * Set promo_card field_prgf_headline non-required.
 */
function ygs_master_update_8218() {
  $config_importer = \Drupal::service('config_import.param_updater');
  $config_importer->update(YGS_CONFDIR . 'field.field.paragraph.promo_card.field_prgf_headline.yml', 'field.field.paragraph.promo_card.field_prgf_headline', 'required');
}

/**
 * Fix media image subprogram_teaser display.
 */
function ygs_master_update_8219() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs([
    'core.entity_view_display.media.image.subprogram_teaser',
  ]);
}

/**
 * Upgrade path tools.
 */
function ygs_master_update_8220() {
  // Enable modules.
  \Drupal::service('module_installer')->install([
    'features',
    'logger_entity',
    'openy_upgrade_tool',
  ]);
}

/**
 * Enable openy_node_alert module.
 */
function ygs_master_update_8221() {
  // Remove active configs.
  $config_factory = \Drupal::configFactory();
  $configs_to_delete = [
    'core.base_field_override.node.alert.promote',
    'core.entity_form_display.node.alert.default',
    'core.entity_view_display.node.alert.default',
    'core.entity_view_display.node.alert.teaser',
    'node.type.alert',
    // Remove old blocks.
    'block.block.views_block__header_alerts_header_alerts_block',
    'block.block.footer_alerts_block',
  ];
  foreach ($configs_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }

  // Add colors terms.
  $terms_to_be_created = [
    ['name' => 'Black', 'field_color' => '000000'],
    ['name' => 'Blue', 'field_color' => '008bd0'],
    ['name' => 'Brown', 'field_color' => '231f20'],
    ['name' => 'Dark magenta', 'field_color' => '92278e'],
    ['name' => 'Light blue', 'field_color' => '00afef'],
    ['name' => 'Light green', 'field_color' => '01a491'],
    ['name' => 'Orange', 'field_color' => 'f15922'],
    ['name' => 'Pink', 'field_color' => 'c6168e'],
    ['name' => 'Red', 'field_color' => 'ed1c23'],
    ['name' => 'Sky blue', 'field_color' => 'bfe1f3'],
    ['name' => 'Yellow', 'field_color' => 'fcb017'],
  ];
  foreach ($terms_to_be_created as $key => $data) {
    $term = Term::create([
      'vid' => 'color',
      'name' => $data['name'],
      'field_color' => $data['field_color'],
    ]);
    $term->save();
  }

  // Enable module.
  \Drupal::service('module_installer')->install(['openy_node_alert']);
  // Add new blocks.
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'block.block.views_block__alerts_footer_alerts',
      'block.block.views_block__alerts_footer_alerts_local',
      'block.block.views_block__alerts_header_alerts',
      'block.block.views_block__alerts_header_alerts_local',
      'page_manager.page_variant.node_view-panels_variant-10',
      'views.view.header_alerts',
    ]
  );

  $fields = [
    // Copy data from field_placement to field_alert_place.
    [
      'from' => [
        'field' => 'field_placement',
        'columns' => ['field_placement_value'],
      ],
      'to' => [
        'field' => 'field_alert_place',
        'columns' => ['field_alert_place_value'],
      ],
    ],
    // Copy data from field_link to field_alert_link.
    [
      'from' => [
        'field' => 'field_link',
        'columns' => [
          'field_link_uri',
          'field_link_title',
          'field_link_options',
        ],
      ],
      'to' => [
        'field' => 'field_alert_link',
        'columns' => [
          'field_alert_link_uri',
          'field_alert_link_title',
          'field_alert_link_options',
        ],
      ],
    ],
    // Copy data from field_body_no_summary to field_alert_description.
    [
      'from' => [
        'field' => 'field_body_no_summary',
        'columns' => [
          'field_body_no_summary_value',
          'field_body_no_summary_format',
        ],
      ],
      'to' => [
        'field' => 'field_alert_description',
        'columns' => [
          'field_alert_description_value',
          'field_alert_description_format',
        ],
      ],
    ],
    // Copy data from field_locations to field_alert_belongs.
    [
      'from' => [
        'field' => 'field_locations',
        'columns' => ['field_locations_target_id'],
      ],
      'to' => [
        'field' => 'field_alert_belongs',
        'columns' => ['field_alert_belongs_target_id'],
      ],
    ],
  ];
  ygs_master_paragraph_field_migrate('alert', $fields, TRUE, 'node');

  // Migrate color field.
  // Yellow = red icon, black text, yellow back (Title text was white).
  // Blue = red icon, black text, Blue back (Title text was white).
  // Dark Blue = red icon, black text, Dark Blue back (Title text was white).
  // Transparent = red icon, black text, white back.
  $manager = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $yellow = key($manager->loadByProperties(['name' => 'Yellow']));
  $blue = key($manager->loadByProperties(['name' => 'Blue']));
  $dBlue = key($manager->loadByProperties(['name' => 'Dark Blue']));
  $white = key($manager->loadByProperties(['name' => 'White']));
  $red = key($manager->loadByProperties(['name' => 'Red']));
  $black = key($manager->loadByProperties(['name' => 'Black']));
  $copy_field_data = "
    INSERT INTO {node__field_alert_color} (bundle,deleted,entity_id,revision_id,langcode,delta,field_alert_color_target_id)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,
    CASE field_color_value
      WHEN 'yellow' THEN " . $yellow . "
      WHEN 'blue' THEN " . $blue . "
      WHEN 'dark_blue' THEN " . $dBlue . "
      WHEN 'transparent' THEN " . $white . "
      ELSE " . $white . "
      END as 'color'
    FROM {node__field_color}
    WHERE bundle='alert'
  ";
  $copy_field_revision_data = "
    INSERT INTO {node_revision__field_alert_color} (bundle,deleted,entity_id,revision_id,langcode,delta,field_alert_color_target_id)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,
    CASE field_color_value
      WHEN 'yellow' THEN " . $yellow . "
      WHEN 'blue' THEN " . $blue . "
      WHEN 'dark_blue' THEN " . $dBlue . "
      WHEN 'transparent' THEN " . $white . "
      ELSE " . $white . "
      END as 'color'
    FROM {node_revision__field_color}
    WHERE bundle='alert'
  ";

  Database::getConnection('default')->query($copy_field_data, [], []);
  Database::getConnection('default')->query($copy_field_revision_data, [], []);

  $copy_field_data = "
    INSERT INTO {node__field_alert_icon_color} (bundle,deleted,entity_id,revision_id,langcode,delta,field_alert_icon_color_target_id)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,
    CASE field_color_value
      WHEN 'yellow' THEN " . $red . "
      WHEN 'blue' THEN " . $red . "
      WHEN 'dark_blue' THEN " . $red . "
      WHEN 'transparent' THEN " . $red . "
      ELSE " . $red . "
      END as 'color'
    FROM {node__field_color}
    WHERE bundle='alert'
  ";
  $copy_field_revision_data = "
    INSERT INTO {node_revision__field_alert_icon_color} (bundle,deleted,entity_id,revision_id,langcode,delta,field_alert_icon_color_target_id)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,
    CASE field_color_value
      WHEN 'yellow' THEN " . $red . "
      WHEN 'blue' THEN " . $red . "
      WHEN 'dark_blue' THEN " . $red . "
      WHEN 'transparent' THEN " . $red . "
      ELSE " . $red . "
      END as 'color'
    FROM {node_revision__field_color}
    WHERE bundle='alert'
  ";

  Database::getConnection('default')->query($copy_field_data, [], []);
  Database::getConnection('default')->query($copy_field_revision_data, [], []);

  $copy_field_data = "
    INSERT INTO {node__field_alert_text_color} (bundle,deleted,entity_id,revision_id,langcode,delta,field_alert_text_color_target_id)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,
    CASE field_color_value
      WHEN 'yellow' THEN " . $black . "
      WHEN 'blue' THEN " . $black . "
      WHEN 'dark_blue' THEN " . $black . "
      WHEN 'transparent' THEN " . $black . "
      ELSE " . $black . "
      END as 'color'
    FROM {node__field_color}
    WHERE bundle='alert'
  ";
  $copy_field_revision_data = "
    INSERT INTO {node_revision__field_alert_text_color} (bundle,deleted,entity_id,revision_id,langcode,delta,field_alert_text_color_target_id)
    SELECT bundle,deleted,entity_id,revision_id,langcode,delta,
    CASE field_color_value
      WHEN 'yellow' THEN " . $black . "
      WHEN 'blue' THEN " . $black . "
      WHEN 'dark_blue' THEN " . $black . "
      WHEN 'transparent' THEN " . $black . "
      ELSE " . $black . "
      END as 'color'
    FROM {node_revision__field_color}
    WHERE bundle='alert'
  ";

  Database::getConnection('default')->query($copy_field_data, [], []);
  Database::getConnection('default')->query($copy_field_revision_data, [], []);
  // Delete old field only for alert node.
  $properties = array(
    'entity_type' => 'node',
    'bundle' => 'alert',
    'include_deleted' => TRUE,
  );
  $fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties($properties);
  foreach ($fields as $field) {
    $entity_type = $field->getTargetEntityTypeId();
    if ($field->getName() == 'field_color') {
      Drupal::entityTypeManager()->getStorage($entity_type)->purgeFieldData($field, 100);
      $field->delete();
      field_purge_field($field);
    }
  }
  \Drupal::service('module_installer')->uninstall(array('ygs_alerts'));
}

/**
 * Enable Optimizely module.
 */
function ygs_master_update_8222() {
  // Enable module.
  \Drupal::service('module_installer')->install(['optimizely']);
}

/**
 * Add Class, Program Subcategory to sitemap.
 */
function ygs_master_update_8223() {
  // Add content to sitemap.
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs(
    [
      'simple_sitemap.bundle_settings.node.class',
      'simple_sitemap.bundle_settings.node.program_subcategory',
    ]
  );
  \Drupal::service('simple_sitemap.generator')->generateSitemap();
}

/**
 * Recreate session instances.
 */
function ygs_master_update_8224(&$sandbox) {
  if (!isset($sandbox['progress'])) {

    $sandbox['progress'] = 0;
    $sandbox['current'] = 0;
    $sandbox['max'] = \Drupal::entityQuery('node')
      ->condition('type', 'session')
      ->condition('field_session_plocation', 'NULL', '!=')
      ->count()
      ->execute();

    // Limit updates for non-acquia environments.
    if (empty($_ENV['AH_SITE_ENVIRONMENT'])) {
      $sandbox['max'] = min($sandbox['max'], 60);
    }
  }

  // Recreate session instances in chunks of 5 sessions.
  $ids = \Drupal::entityQuery('node')
    ->condition('type', 'session')
    ->condition('nid', $sandbox['current'], '>')
    ->condition('field_session_plocation', 'NULL', '!=')
    ->range(0, 5)
    ->sort('nid')
    ->execute();
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($ids);
  foreach ($nodes as $node) {
    \Drupal::service('session_instance.manager')->recreateSessionInstances($node);
    $sandbox['progress']++;
    $sandbox['current'] = $node->id();
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  // To display a message to the user when the update is completed, return it.
  // If you do not want to display a completion message, return nothing.
  return t('Session instances were created for @count session nodes', ['@count' => $sandbox['max']]);
}

/**
 * Update categories_listing view to match YGS version.
 */
function ygs_master_update_8225() {
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['display.default.display_options.sorts'];
  foreach ($update_parts as $part) {
    $config_importer->update(YGS_CONFDIR . 'views.view.categories_listing.yml', 'views.view.categories_listing', $part);
  }
}

/**
 * Update blog view.
 */
function ygs_master_update_8226() {
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['dependencies', 'display'];
  foreach ($update_parts as $part) {
    $config_importer->update(YGS_CONFDIR . 'views.view.blog.yml', 'views.view.blog', $part);
  }
}

/**
 * Update blog treaser.
 */
function ygs_master_update_8227() {
  $config_importer = \Drupal::service('config_import.param_updater');
  $update_parts = ['dependencies', 'content', 'hidden'];
  foreach ($update_parts as $part) {
    $config_importer->update(YGS_CONFDIR . 'core.entity_view_display.node.blog.teaser.yml', 'core.entity_view_display.node.blog.teaser', $part);
  }
}

/**
 * Fix class nodes Session tab view.
 */
function ygs_master_update_8228() {
  $importer = \Drupal::service('config_import.importer');
  $importer->setDirectory(YGS_CONFDIR);
  $importer->importConfigs([
    'views.view.sessions',
  ]);
}

/**
 * Update the classes view.
 */
function ygs_master_update_8229() {
  \Drupal::service('config_import.importer')->importConfigs(
    [
      YGS_CONFDIR . 'views.view.sub_category_classes.yml',
    ]
  );
}

/**
 * Update banner image view mode.
 */
function ygs_master_update_8230() {
  $config_importer = \Drupal::service('openy_upgrade_tool.importer');
  $config_importer->setDirectory(YGS_CONFDIR_NO_SLASH);
  $config_importer->importConfigs(['core.entity_view_display.media.image.prgf_banner']);
}

/**
 * Enable openy_addthis module.
 */
function ygs_master_update_8231() {
  \Drupal::service('module_installer')->install(['openy_addthis'], TRUE);
}
