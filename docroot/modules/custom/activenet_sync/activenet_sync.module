<?php

/**
 * @file
 * Contains activenet_sync module hooks.
 */

use Drupal\Core\Url;

/**
 * Implements hook_preprocess_page().
 */
function activenet_sync_preprocess_page(&$variables) {
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  $user = \Drupal::currentUser();
  // Show message on admin pages for user with correct permissions.
  if ($is_admin && $user->hasPermission('edit sync cache entities')) {
    // Get detached sync_cache entities.
    $entity_ids = \Drupal::entityQuery('sync_cache')->condition('status', 'detached');
    $result = $entity_ids->execute();
    if ($result) {
      // Show message if has detached sync_cache entities.
      $url = Url::fromRoute('entity.sync_cache.collection');
      $link = \Drupal::l(t('Sync dashboard'), $url);
      drupal_set_message(t('Detached sessions/classes are available on website. Please visit %link and attach them manually.', ['%link' => $link]), 'warning');
    }
  }
}

/**
 * Run activenet_sync_queue_worker.
 */
function activenet_sync_run_queue_worker() {
  $queue = \Drupal::queue('activenet_sync_proceed_imported_nodes');
  // @see Drupal\activenet_sync\Plugin\QueueWorker\ActivenetSyncQueueWorker
  $queue_worker = \Drupal::service('plugin.manager.queue_worker')->createInstance('activenet_sync_queue_worker');

  $end = time() + 45;
  while (time() < $end && ($item = $queue->claimItem())) {
    $queue_worker->processItem($item->data);
    $queue->deleteItem($item);
  }

}

/**
 * Add all sync cache entities for checking their existing in API.
 */
function activenet_sync_create_check_existing_queue() {
  $queue_factory = \Drupal::service('queue');
  $queue = $queue_factory->get('activenet_sync_sessions_cleaner');

  // Get all sync cache entities.
  $query = \Drupal::database()->select('sync_cache', 'sc');
  $query->fields('sc', ['id', 'type', 'session']);
  $query->join('sync_cache__field_external_id', 'exi', 'sc.id = exi.entity_id');
  $query->addField('exi', 'field_external_id_value');
  $sync_caches = $query->execute()->fetchAllAssoc('id');

  foreach ($sync_caches as $values) {
    // Add sync cache entity to activenet_sync_check_existing_sessions queue.
    $queue->createItem($values);
  }
}

/**
 * Run activenet_sync_sessions_cleaner.
 */
function activenet_sync_run_sessions_cleaner_queue_worker() {
  $queue = \Drupal::queue('activenet_sync_sessions_cleaner');
  $queue_worker = \Drupal::service('plugin.manager.queue_worker')->createInstance('activenet_sync_sessions_cleaner');

  $end = time() + 45;
  while (time() < $end && ($item = $queue->claimItem())) {
    $queue_worker->processItem($item->data);
    $queue->deleteItem($item);
  }

}
