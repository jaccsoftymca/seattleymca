<?php

/**
 * @file
 * Contains ygs_branch module hooks.
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\ygs_branch\Utility\UpdatesQueueProvisioner;

/**
 * Implements hook_entity_insert().
 */
function ygs_branch_entity_insert(EntityInterface $entity) {
  if (UpdatesQueueProvisioner::isBlogPost($entity) || UpdatesQueueProvisioner::isAnnouncement($entity)) {
    if (!$entity->isPublished() || !ygs_moderation_wrapper_entity_moderation_status($entity)) {
      // Skip not published entities.
      return;
    }
    UpdatesQueueProvisioner::updateParagraphs($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function ygs_branch_entity_update(EntityInterface $entity) {
  if (UpdatesQueueProvisioner::isBlogPost($entity) || UpdatesQueueProvisioner::isAnnouncement($entity)) {
    if (!$entity->isPublished()) {
      // Delete this entity from paragraphs and replace with new.
      UpdatesQueueProvisioner::deleteItemFromParagraphs($entity);
      return;
    }
    // Update related paragraphs.
    UpdatesQueueProvisioner::updateParagraphs($entity);
  }
}

/**
 * Implements hook_entity_predelete().
 */
function ygs_branch_entity_predelete(EntityInterface $entity) {
  if (UpdatesQueueProvisioner::isBlogPost($entity) || UpdatesQueueProvisioner::isAnnouncement($entity)) {
    // Delete this entity from paragraphs and replace with new.
    UpdatesQueueProvisioner::deleteItemFromParagraphs($entity);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ygs_branch_form_node_blog_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide "Add to Branch queue" on Blog Post Edit form.
  unset($form['field_add_to_branch_queue']);
  // Hide "Add to Homepage queue" on Blog Post Edit form.
  unset($form['field_homepage_queue']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ygs_branch_form_node_announcement_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide "Add to Branch queue" on Announcement Edit form.
  unset($form['field_add_to_branch_queue']);
  // Hide "Add to Homepage queue" on Announcement Edit form.
  unset($form['field_homepage_queue']);
}

/**
 * Implements hook_theme().
 */
function ygs_branch_theme() {
  return array(
    'ygs_branch_sessions' => array(
      'variables' => array(
        'teasers' => [],
      ),
    ),
  );
}

/**
 * Helper function to retrieve Branch<-SESSION->Class->Activity->Category->Program chain data.
 *
 * @param NodeInterface $session
 *   The session node.
 *
 * @return array
 *   Array of session's data.
 */
function ygs_branch_get_session_data(NodeInterface $session) {
  $session_data = [];
  if (empty($session->field_session_class->target_id)) {
    return $session_data;
  }
  $class_id = $session->field_session_class->target_id;
  // Load a Class referenced to the Session.
  $class = \Drupal::entityTypeManager()->getStorage('node')->load($class_id);
  if (empty($class->field_class_activity->target_id)) {
    return $session_data;
  }
  // TODO: Modify this, field_class_activity have multiple values.
  $activity_id = $class->get('field_class_activity')->first()->target_id;
  // Load an Activity referenced to the Class.
  $activity = \Drupal::entityTypeManager()->getStorage('node')->load($activity_id);
  if (empty($activity->field_activity_category->target_id)) {
    return $session_data;
  }
  $program_subcategory_id = $activity->field_activity_category->target_id;
  // Load a Program Subcategory referenced to the Activity.
  $program_subcategory = \Drupal::entityTypeManager()->getStorage('node')->load($program_subcategory_id);
  if (empty($program_subcategory->field_category_program->target_id)) {
    return $session_data;
  }
  // If we all nodes in chain, return data.
  $program_id = $program_subcategory->field_category_program->target_id;
  // Load a Program Subcategory referenced to the Activity.
  $program = \Drupal::entityTypeManager()->getStorage('node')->load($program_id);
  $session_data = [
    'class' => $class,
    'activity' => $activity,
    'program_subcategory' => $program_subcategory,
    'program' => $program,
  ];

  return $session_data;
}
