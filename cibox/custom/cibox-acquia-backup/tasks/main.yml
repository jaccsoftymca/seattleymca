---
# Create dump.
- name: Getting timestamp for backup
  shell: date +'%Y_%m_%d_%H_%M_%S'
  register: backup_name_raw

- name: Getting name for backup
  set_fact: backup_name={{ backup_name_raw.stdout }}.sql.gz

- name: Getting name for sanitize table
  set_fact: sanitize_db={{ sanitize_db_name }}_{{ backup_name_raw.stdout }}

- name: Make sure local backup dir is available
  sudo: yes
  file: path={{ backup_folder }}/{{ environment_name }} state=directory recurse=yes

- name: Make sure remote backup dir is available
  shell: "ssh -t {{ project_name }}.{{ environment_name }}@{{ server }}.{{ cloud_hosting }} \"mkdir -p /home/{{ project_name }}/backups/{{ environment_name }}\""

- name: Make backup on Acquia server
  shell: "ssh -t {{ project_name }}.{{ environment_name }}@{{ server }}.{{ cloud_hosting }} \"drush @{{ project_name }}.{{ environment_name }} sql-dump | gzip -9 > /home/{{ project_name }}/backups/{{ environment_name }}/{{ backup_name }}\""

- name: Make backup as latest on Acquia
  shell: "ssh -t {{ project_name }}.{{ environment_name }}@{{ server }}.{{ cloud_hosting }} \"cp /home/{{ project_name }}/backups/{{ environment_name }}/{{ backup_name }} /home/{{ project_name }}/backups/latest_{{ environment_name }}.sql.gz\""

- name: Cleanup backups on Acquia in env directory
  shell: "ssh -t {{ project_name }}.{{ environment_name }}@{{ server }}.{{ cloud_hosting }} \"cd /home/{{ project_name }}/backups/{{ environment_name }} && ls -C1 -t | awk 'NR>{{ backup_capacity }}' | sed -e \\\"s/^/rm '/\\\" -e \\\"s/$/'/\\\" | sh\""

# TODO chmod for backup folder.
- name: Copy backup to CI server
  shell: "scp {{ project_name }}.{{ environment_name }}@{{ server }}.{{ cloud_hosting }}:/home/{{ project_name }}/backups/latest_{{ environment_name }}.sql.gz {{ backup_folder }}/{{ environment_name }}/{{ backup_name }}"

# Sanitize backup.
- name: Create temp DB for sanitize
  shell: 'mysql -u{{ mysql_user }} -p{{ mysql_pass }} -e "DROP DATABASE IF EXISTS {{ sanitize_db }}; CREATE DATABASE {{ sanitize_db }};" -s'

- name: Import data to sanitize_db from backup
  shell: "gunzip < {{ backup_folder }}/{{ environment_name }}/{{ backup_name }} | mysql -u{{ mysql_user }} -p{{ mysql_pass }} -D{{ sanitize_db }} -s"
  sudo: yes

- name: Cleanup sanitize_db - truncate tables.
  shell: 'mysql -u{{ mysql_user }} -p{{ mysql_pass }} -D{{ sanitize_db }} -e "TRUNCATE TABLE {{ item }};" -s'
  with_items: truncate_tables

- name: Cleanup sanitize_db - cleanup node_revision and node_field_revision tebles.
  shell: 'mysql -u{{ mysql_user }} -p{{ mysql_pass }} -D{{ sanitize_db }} -e "DELETE FROM node_revision WHERE vid NOT IN (SELECT vid FROM node_field_data); DELETE FROM node_field_revision WHERE vid NOT IN (SELECT vid FROM node_field_data);" -s'

- name: Cleanup sanitize_db - cleanup node field revision tables.
  shell: 'mysql -u{{ mysql_user }} -p{{ mysql_pass }} -D{{ sanitize_db }} -e "show tables;" -s | egrep "{{ revisions_pattern }}" | xargs -I "@@" mysql -u{{ mysql_user }} -p{{ mysql_pass }} -D{{ sanitize_db }} -e "DELETE FROM @@ WHERE revision_id NOT IN (SELECT vid FROM node_revision);"'

- name: Export data from sanitize_db
  shell: "mysqldump -u{{ mysql_user }} -p{{ mysql_pass }} {{ sanitize_db }} | gzip -9 > {{ backup_folder }}/latest_{{ environment_name }}.sql.gz"
  sudo: yes

- name: Drop temp DB
  shell: 'mysql -u{{ mysql_user }} -p{{ mysql_pass }} -e "DROP DATABASE IF EXISTS {{ sanitize_db }};" -s'

- name: Cleanup backups on CI server in env directory
  shell: "ls -C1 -t | awk 'NR>{{ backup_capacity }}' | sed -e \"s/^/rm '/\" -e \"s/$/'/\" | sh"
  args:
    chdir: "{{ backup_folder }}/{{ environment_name }}"

- name: Initiate Acquia native backup
  shell: "ssh -t {{ project_name }}.{{ environment_name }}@{{ server }}.{{ cloud_hosting }} \"drush @{{ project_name }}.{{ environment_name }} ac-database-instance-backup {{ project_name }} -l {{ url }} --email={{ acquia_user_email }} --key={{ acquia_user_api_key }}\""

# Max execution time: 180*5/60 = 15mins.
- name: Wait for Acquia backup
  shell: "ssh -t {{ project_name }}.{{ environment_name }}@{{ server }}.{{ cloud_hosting }} \"drush @{{ project_name }}.{{ environment_name }} ac-task-list --state=started -l {{ url }} --email={{ acquia_user_email }} --key={{ acquia_user_api_key }}\""
  register: result
  until: result.stdout == ""
  retries: 180
  delay: 5
